/*
Deployment script for Rogge.Smash.Svr

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "Rogge.Smash.Svr"
:setvar DefaultFilePrefix "Rogge.Smash.Svr"
:setvar DefaultDataPath "D:\Data SQL Server\Data\"
:setvar DefaultLogPath "D:\Data SQL Server\Log\"

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
USE [$(DatabaseName)];


GO
ALTER DATABASE [$(DatabaseName)]
    SET SINGLE_USER 
    WITH ROLLBACK IMMEDIATE
GO
PRINT N'Altering Function [smash].[SystemDatabaseType]...';


GO
ALTER FUNCTION [smash].[SystemDatabaseType]
(
	@DatabaseId		INT
)
RETURNS VARCHAR(8)
WITH SCHEMABINDING, RETURNS NULL ON NULL INPUT, INLINE = ON
AS
BEGIN

	DECLARE	@DatabaseType	VARCHAR(8)	= 'User';

	SET	@DatabaseType =
	CASE
		WHEN (@DatabaseId <= 4)			THEN 'System'

		WHEN (db_name(@DatabaseId) IN (
				N'DWConfiguration',
				N'DWDiagnostics',
				N'DWQueue',
				N'SSISDB',
				N'SSRS',
				N'SSRSTempDB'
				)
			)							THEN 'Support'

		WHEN (db_name(@DatabaseId) LIKE N'AdventureWorks%')
										THEN 'Training'
	ELSE
		@DatabaseType
	END;

	RETURN @DatabaseType;

END;
GO
PRINT N'Refreshing View [smash].[SystemVolumes]...';


GO
EXECUTE sp_refreshsqlmodule N'[smash].[SystemVolumes]';


GO
PRINT N'Refreshing View [smash].[SystemDatabases]...';


GO
EXECUTE sp_refreshsqlmodule N'[smash].[SystemDatabases]';


GO
PRINT N'Altering Procedure [smash].[Select_DatabaseIndexes]...';


GO
ALTER PROCEDURE [smash].[Select_DatabaseIndexes]
AS
BEGIN

	SET NOCOUNT ON;
	SET LOCK_TIMEOUT 100;
	SET DEADLOCK_PRIORITY HIGH;

	DECLARE @TxnCount		INT				= @@TRANCOUNT;
	DECLARE @TxnActive		VARCHAR(32)		= REPLACE(CONVERT(VARCHAR(36), NEWID(), 0), '-', '');
	DECLARE @ErrorCode		INT				= 0;

	IF (@TxnCount = 0) BEGIN TRANSACTION @TxnActive ELSE SAVE TRANSACTION @TxnActive;
	BEGIN TRY
	-----------------------------------------------------------------------------------------------

		DROP TABLE IF EXISTS #ReturnTable_DatabaseIndexes;

		CREATE TABLE #ReturnTable_DatabaseIndexes
		(
			[ReturnTableId]					INT					NOT	NULL	IDENTITY(1, 1) NOT FOR REPLICATION,

			[instance_id]					INT					NOT	NULL,
			[database_id]					SMALLINT			NOT	NULL,
			[schema_id]						INT					NOT	NULL,
			[object_id]						INT					NOT	NULL,
			[index_id]						INT					NOT	NULL,

			[Instance]						NVARCHAR(128)		NOT	NULL,
			[InstanceHost]					NVARCHAR(128)		NOT	NULL,
			[InstanceName]					NVARCHAR(128)		NOT	NULL,

			[DatabaseType]					VARCHAR(8)			NOT	NULL,
			[ObjectGroup]					VARCHAR(40)				NULL,
			[ObjectType]					VARCHAR(40)				NULL,

			[DatabaseName]					NVARCHAR(128)		NOT	NULL,
			[SchemaName]					NVARCHAR(128)		NOT	NULL,
			[TableName]						NVARCHAR(128)		NOT	NULL,
			[IndexName]						NVARCHAR(128)		NOT	NULL,

			[IndexType]						VARCHAR(30)			NOT	NULL,
			[IsUnique]						VARCHAR(3)			NOT	NULL,

			[FileGroup]						NVARCHAR(128)		NOT	NULL,
			[FileGroupDescription]			VARCHAR(24)			NOT	NULL,
			[FileGroupIsDefault]			VARCHAR(3)			NOT	NULL,
			[FileGroupIsSystem]				VARCHAR(3)			NOT	NULL,

			[IgnoreDuplicateKey]			VARCHAR(3)			NOT	NULL,
			[IsPrimaryKey]					VARCHAR(3)			NOT	NULL,
			[IsUniqueConstraint]			VARCHAR(3)			NOT	NULL,

			[FillFactor]					TINYINT				NOT	NULL,

			[IsPadded]						VARCHAR(3)			NOT	NULL,
			[IsEnabled]						VARCHAR(3)			NOT	NULL,
			[IsDisabled]					VARCHAR(3)			NOT	NULL,
			[IsHypothetical]				VARCHAR(3)			NOT	NULL,
			[IsIgnoredInOptimization]		VARCHAR(3)			NOT	NULL,
			[AllowRowLocks]					VARCHAR(3)			NOT	NULL,
			[AllowPageLocks]				VARCHAR(3)			NOT	NULL,
			[HasFilter]						VARCHAR(3)			NOT	NULL,

			[CompressionDelayMinutes]		INT						NULL,

			[SuppressDupKeyMessages]		VARCHAR(3)			NOT	NULL,
			[IsAutoCreated]					VARCHAR(3)			NOT	NULL,
			[OptimizeForSequentialKey]		VARCHAR(3)				NULL,

			PRIMARY KEY CLUSTERED([ReturnTableId]	ASC)
		);

		DECLARE	@SqlBase		NVARCHAR(MAX)	= N'
		IF (OBJECT_ID(''[$(DatabaseName)].[smash].[DatabaseIndexes]'') IS NOT NULL)
		BEGIN

			INSERT INTO #ReturnTable_DatabaseIndexes	WITH(TABLOCK)
			(
				[instance_id],
				[database_id],
				[schema_id],
				[object_id],
				[index_id],

				[Instance],
				[InstanceHost],
				[InstanceName],

				[DatabaseType],
				[ObjectGroup],
				[ObjectType],

				[DatabaseName],
				[SchemaName],
				[TableName],
				[IndexName],

				[IndexType],
				[IsUnique],

				[FileGroup],
				[FileGroupDescription],
				[FileGroupIsDefault],
				[FileGroupIsSystem],

				[IgnoreDuplicateKey],
				[IsPrimaryKey],
				[IsUniqueConstraint],

				[FillFactor],

				[IsPadded],
				[IsEnabled],
				[IsDisabled],
				[IsHypothetical],
				[IsIgnoredInOptimization],
				[AllowRowLocks],
				[AllowPageLocks],
				[HasFilter],

				[CompressionDelayMinutes],

				[SuppressDupKeyMessages],
				[IsAutoCreated],
				[OptimizeForSequentialKey]
			)
			SELECT
				[t].[instance_id],
				[t].[database_id],
				[t].[schema_id],
				[t].[object_id],
				[t].[index_id],

				[t].[Instance],
				[t].[InstanceHost],
				[t].[InstanceName],

				[t].[DatabaseType],
				[t].[ObjectGroup],
				[t].[ObjectType],

				[t].[DatabaseName],
				[t].[SchemaName],
				[t].[TableName],
				[t].[IndexName],

				[t].[IndexType],
				[t].[IsUnique],

				[t].[FileGroup],
				[t].[FileGroupDescription],
				[t].[FileGroupIsDefault],
				[t].[FileGroupIsSystem],

				[t].[IgnoreDuplicateKey],
				[t].[IsPrimaryKey],
				[t].[IsUniqueConstraint],

				[t].[FillFactor],

				[t].[IsPadded],
				[t].[IsEnabled],
				[t].[IsDisabled],
				[t].[IsHypothetical],
				[t].[IsIgnoredInOptimization],
				[t].[AllowRowLocks],
				[t].[AllowPageLocks],
				[t].[HasFilter],

				[t].[CompressionDelayMinutes],

				[t].[SuppressDupKeyMessages],
				[t].[IsAutoCreated],
				[t].[OptimizeForSequentialKey]
			FROM
				[$(DatabaseName)].[smash].[DatabaseIndexes]	[t];

		END;';

		DECLARE @DbName			NVARCHAR(128)	= N'';
		DECLARE @SqlCommand		NVARCHAR(MAX);

		WHILE (@DbName IS NOT NULL)
		BEGIN

			SELECT
				@DbName = MIN([d].[name])
			FROM
				sys.databases	[d]
			WHERE
					([d].[name]	> @DbName)
				--AND	([d].[database_id] NOT IN (SELECT [x].[database_id] FROM [smash].[ExcludeDatabases] [x]));

			SET @SqlCommand = REPLACE(@SqlBase, N'$(DatabaseName)', @DbName);

			PRINT CONVERT(NCHAR(23), SYSDATETIME(), 121) + NCHAR(9) + N'Querying database [' + @DbName + N']';

			EXECUTE sp_executesql @SqlCommand;

		END;

		SELECT
			[t].[instance_id],
			[t].[database_id],
			[t].[schema_id],
			[t].[object_id],
			[t].[index_id],

			[t].[Instance],
			[t].[InstanceHost],
			[t].[InstanceName],

			[t].[DatabaseType],
			[t].[ObjectGroup],
			[t].[ObjectType],

			[t].[DatabaseName],
			[t].[SchemaName],
			[t].[TableName],
			[t].[IndexName],

			[t].[IndexType],
			[t].[IsUnique],

			[t].[FileGroup],
			[t].[FileGroupDescription],
			[t].[FileGroupIsDefault],
			[t].[FileGroupIsSystem],

			[t].[IgnoreDuplicateKey],
			[t].[IsPrimaryKey],
			[t].[IsUniqueConstraint],

			[t].[FillFactor],

			[t].[IsPadded],
			[t].[IsEnabled],
			[t].[IsDisabled],
			[t].[IsHypothetical],
			[t].[IsIgnoredInOptimization],
			[t].[AllowRowLocks],
			[t].[AllowPageLocks],
			[t].[HasFilter],

			[t].[CompressionDelayMinutes],

			[t].[SuppressDupKeyMessages],
			[t].[IsAutoCreated],
			[t].[OptimizeForSequentialKey]
		FROM
			#ReturnTable_DatabaseIndexes	[t];

		DROP TABLE IF EXISTS #ReturnTable_DatabaseIndexes;

	-----------------------------------------------------------------------------------------------
	IF (@TxnCount = 0) COMMIT TRANSACTION @TxnActive ELSE SAVE TRANSACTION @TxnActive;
	END TRY
	BEGIN CATCH

		SET @ErrorCode = @@ERROR;

		IF (XACT_STATE() = -1) ROLLBACK	TRANSACTION	@TxnActive;
		IF (XACT_STATE() =  1) COMMIT	TRANSACTION	@TxnActive;

		THROW;

		RETURN @ErrorCode;

	END CATCH;

	RETURN @ErrorCode;

END;
GO
PRINT N'Altering Procedure [smash].[Select_DatabaseIndexesAllocation]...';


GO
ALTER PROCEDURE [smash].[Select_DatabaseIndexesAllocation]
AS
BEGIN

	SET NOCOUNT ON;
	SET LOCK_TIMEOUT 100;
	SET DEADLOCK_PRIORITY HIGH;

	DECLARE @TxnCount		INT				= @@TRANCOUNT;
	DECLARE @TxnActive		VARCHAR(32)		= REPLACE(CONVERT(VARCHAR(36), NEWID(), 0), '-', '');
	DECLARE @ErrorCode		INT				= 0;

	IF (@TxnCount = 0) BEGIN TRANSACTION @TxnActive ELSE SAVE TRANSACTION @TxnActive;
	BEGIN TRY
	-----------------------------------------------------------------------------------------------

		DROP TABLE IF EXISTS #ReturnTable_DatabaseIndexesAllocation;

		CREATE TABLE #ReturnTable_DatabaseIndexesAllocation
		(
			[ReturnTableId]					INT					NOT	NULL	IDENTITY(1, 1) NOT FOR REPLICATION,

			[instance_id]					INT					NOT	NULL,
			[database_id]					SMALLINT			NOT	NULL,
			[schema_id]						INT					NOT	NULL,
			[object_id]						INT					NOT	NULL,
			[index_id]						INT					NOT	NULL,
			[partition_number]				INT					NOT	NULL,
			[partition_id]					BIGINT				NOT	NULL,
			[hobt_id]						BIGINT				NOT	NULL,

			[Instance]						NVARCHAR(128)		NOT	NULL,
			[InstanceHost]					NVARCHAR(128)		NOT	NULL,
			[InstanceName]					NVARCHAR(128)		NOT	NULL,

			[DatabaseType]					VARCHAR(8)			NOT	NULL,
			[ObjectGroup]					VARCHAR(40)				NULL,
			[ObjectType]					VARCHAR(40)				NULL,

			[DatabaseName]					NVARCHAR(128)		NOT	NULL,
			[SchemaName]					NVARCHAR(128)		NOT	NULL,
			[TableName]						NVARCHAR(128)		NOT	NULL,
			[IndexName]						NVARCHAR(128)		NOT	NULL,

			[IndexType]						VARCHAR(30)			NOT	NULL,
			[IsUnique]						VARCHAR(3)			NOT	NULL,

			[FileGroup]						NVARCHAR(128)		NOT	NULL,
			[FileGroupDescription]			VARCHAR(24)			NOT	NULL,
			[FileGroupIsDefault]			VARCHAR(3)			NOT	NULL,
			[FileGroupIsSystem]				VARCHAR(3)			NOT	NULL,

			[IgnoreDuplicateKey]			VARCHAR(3)			NOT	NULL,
			[IsPrimaryKey]					VARCHAR(3)			NOT	NULL,
			[IsUniqueConstraint]			VARCHAR(3)			NOT	NULL,

			[FillFactor]					TINYINT				NOT	NULL,

			[IsPadded]						VARCHAR(3)			NOT	NULL,
			[IsEnabled]						VARCHAR(3)			NOT	NULL,
			[IsDisabled]					VARCHAR(3)			NOT	NULL,
			[IsHypothetical]				VARCHAR(3)			NOT	NULL,
			[IsIgnoredInOptimization]		VARCHAR(3)			NOT	NULL,
			[AllowRowLocks]					VARCHAR(3)			NOT	NULL,
			[AllowPageLocks]				VARCHAR(3)			NOT	NULL,
			[HasFilter]						VARCHAR(3)			NOT	NULL,

			[CompressionDelayMinutes]		INT						NULL,

			[SuppressDupKeyMessages]		VARCHAR(3)			NOT	NULL,
			[IsAutoCreated]					VARCHAR(3)			NOT	NULL,
			[OptimizeForSequentialKey]		VARCHAR(3)				NULL,

			[IsRowCount]					VARCHAR(3)			NOT	NULL,
			[RowCount]						BIGINT				NOT	NULL,

			[DataCompression]				VARCHAR(24)			NOT	NULL,
			[AllocationType]				VARCHAR(24)			NOT	NULL,

			[AllocationTotalPages]			BIGINT				NOT	NULL,
			[AllocationUsedPages]			BIGINT				NOT	NULL,
			[AllocationDataPages]			BIGINT				NOT	NULL,
			[AllocationFreePages]			BIGINT				NOT	NULL,

			[AllocationTotalMb]				FLOAT				NOT	NULL,
			[AllocationUsedMb]				FLOAT				NOT	NULL,
			[AllocationDataMb]				FLOAT				NOT	NULL,
			[AllocationFreeMb]				FLOAT				NOT	NULL,

			PRIMARY KEY CLUSTERED([ReturnTableId]	ASC)
		);

		DECLARE	@SqlBase		NVARCHAR(MAX)	= N'
		IF (OBJECT_ID(''[$(DatabaseName)].[smash].[DatabaseIndexesAllocation]'') IS NOT NULL)
		BEGIN

			INSERT INTO #ReturnTable_DatabaseIndexesAllocation	WITH(TABLOCK)
			(
				[instance_id],
				[database_id],
				[schema_id],
				[object_id],
				[index_id],
				[partition_number],
				[partition_id],
				[hobt_id],

				[Instance],
				[InstanceHost],
				[InstanceName],

				[DatabaseType],
				[ObjectGroup],
				[ObjectType],

				[DatabaseName],
				[SchemaName],
				[TableName],
				[IndexName],

				[IndexType],
				[IsUnique],

				[FileGroup],
				[FileGroupDescription],
				[FileGroupIsDefault],
				[FileGroupIsSystem],

				[IgnoreDuplicateKey],
				[IsPrimaryKey],
				[IsUniqueConstraint],

				[FillFactor],

				[IsPadded],
				[IsEnabled],
				[IsDisabled],
				[IsHypothetical],
				[IsIgnoredInOptimization],
				[AllowRowLocks],
				[AllowPageLocks],
				[HasFilter],

				[CompressionDelayMinutes],

				[SuppressDupKeyMessages],
				[IsAutoCreated],
				[OptimizeForSequentialKey],

				[IsRowCount],
				[RowCount],

				[DataCompression],
				[AllocationType],

				[AllocationTotalPages],
				[AllocationUsedPages],
				[AllocationDataPages],
				[AllocationFreePages],

				[AllocationTotalMb],
				[AllocationUsedMb],
				[AllocationDataMb],
				[AllocationFreeMb]
			)
			SELECT
				[t].[instance_id],
				[t].[database_id],
				[t].[schema_id],
				[t].[object_id],
				[t].[index_id],
				[t].[partition_number],
				[t].[partition_id],
				[t].[hobt_id],

				[t].[Instance],
				[t].[InstanceHost],
				[t].[InstanceName],

				[t].[DatabaseType],
				[t].[ObjectGroup],
				[t].[ObjectType],

				[t].[DatabaseName],
				[t].[SchemaName],
				[t].[TableName],
				[t].[IndexName],

				[t].[IndexType],
				[t].[IsUnique],

				[t].[FileGroup],
				[t].[FileGroupDescription],
				[t].[FileGroupIsDefault],
				[t].[FileGroupIsSystem],

				[t].[IgnoreDuplicateKey],
				[t].[IsPrimaryKey],
				[t].[IsUniqueConstraint],

				[t].[FillFactor],

				[t].[IsPadded],
				[t].[IsEnabled],
				[t].[IsDisabled],
				[t].[IsHypothetical],
				[t].[IsIgnoredInOptimization],
				[t].[AllowRowLocks],
				[t].[AllowPageLocks],
				[t].[HasFilter],

				[t].[CompressionDelayMinutes],

				[t].[SuppressDupKeyMessages],
				[t].[IsAutoCreated],
				[t].[OptimizeForSequentialKey],

				[t].[IsRowCount],
				[t].[RowCount],

				[t].[DataCompression],
				[t].[AllocationType],

				[t].[AllocationTotalPages],
				[t].[AllocationUsedPages],
				[t].[AllocationDataPages],
				[t].[AllocationFreePages],

				[t].[AllocationTotalMb],
				[t].[AllocationUsedMb],
				[t].[AllocationDataMb],
				[t].[AllocationFreeMb]
			FROM
				[$(DatabaseName)].[smash].[DatabaseIndexesAllocation]	[t];

		END;';

		DECLARE @DbName			NVARCHAR(128)	= N'';
		DECLARE @SqlCommand		NVARCHAR(MAX);

		WHILE (@DbName IS NOT NULL)
		BEGIN

			SELECT
				@DbName = MIN([d].[name])
			FROM
				sys.databases	[d]
			WHERE
					([d].[name]	> @DbName)
				--AND	([d].[database_id] NOT IN (SELECT [x].[database_id] FROM [smash].[ExcludeDatabases] [x]));

			SET @SqlCommand = REPLACE(@SqlBase, N'$(DatabaseName)', @DbName);

			PRINT CONVERT(NCHAR(23), SYSDATETIME(), 121) + NCHAR(9) + N'Querying database [' + @DbName + N']';

			EXECUTE sp_executesql @SqlCommand;

		END;

		SELECT
			[t].[instance_id],
			[t].[database_id],
			[t].[schema_id],
			[t].[object_id],
			[t].[index_id],
			[t].[partition_number],
			[t].[partition_id],
			[t].[hobt_id],

			[t].[Instance],
			[t].[InstanceHost],
			[t].[InstanceName],

			[t].[DatabaseType],
			[t].[ObjectGroup],
			[t].[ObjectType],

			[t].[DatabaseName],
			[t].[SchemaName],
			[t].[TableName],
			[t].[IndexName],

			[t].[IndexType],
			[t].[IsUnique],

			[t].[FileGroup],
			[t].[FileGroupDescription],
			[t].[FileGroupIsDefault],
			[t].[FileGroupIsSystem],

			[t].[IgnoreDuplicateKey],
			[t].[IsPrimaryKey],
			[t].[IsUniqueConstraint],

			[t].[FillFactor],

			[t].[IsPadded],
			[t].[IsEnabled],
			[t].[IsDisabled],
			[t].[IsHypothetical],
			[t].[IsIgnoredInOptimization],
			[t].[AllowRowLocks],
			[t].[AllowPageLocks],
			[t].[HasFilter],

			[t].[CompressionDelayMinutes],

			[t].[SuppressDupKeyMessages],
			[t].[IsAutoCreated],
			[t].[OptimizeForSequentialKey],

			[t].[IsRowCount],
			[t].[RowCount],

			[t].[DataCompression],
			[t].[AllocationType],

			[t].[AllocationTotalPages],
			[t].[AllocationUsedPages],
			[t].[AllocationDataPages],
			[t].[AllocationFreePages],

			[t].[AllocationTotalMb],
			[t].[AllocationUsedMb],
			[t].[AllocationDataMb],
			[t].[AllocationFreeMb]
		FROM
			#ReturnTable_DatabaseIndexesAllocation	[t];

		DROP TABLE IF EXISTS #ReturnTable_DatabaseIndexesAllocation;

	-----------------------------------------------------------------------------------------------
	IF (@TxnCount = 0) COMMIT TRANSACTION @TxnActive ELSE SAVE TRANSACTION @TxnActive;
	END TRY
	BEGIN CATCH

		SET @ErrorCode = @@ERROR;

		IF (XACT_STATE() = -1) ROLLBACK	TRANSACTION	@TxnActive;
		IF (XACT_STATE() =  1) COMMIT	TRANSACTION	@TxnActive;

		THROW;

		RETURN @ErrorCode;

	END CATCH;

	RETURN @ErrorCode;

END;
GO
PRINT N'Refreshing Procedure [smash].[Select_SystemDatabaseFiles]...';


GO
EXECUTE sp_refreshsqlmodule N'[smash].[Select_SystemDatabaseFiles]';


GO
/*
Post-Deployment Script Template							
--------------------------------------------------------------------------------------
 This file contains SQL statements that will be appended to the build script.		
 Use SQLCMD syntax to include a file in the post-deployment script.			
 Example:      :r .\myfile.sql								
 Use SQLCMD syntax to reference a variable in the post-deployment script.		
 Example:      :setvar TableName MyTable							
               SELECT * FROM [$(TableName)]					
--------------------------------------------------------------------------------------
*/

MERGE [smash].[ExcludeDatabases] [t]
USING (
	SELECT
		[t].[database_id],
			[DatabaseName]	=	[t].[name]
	FROM
		sys.databases	[t]
	WHERE
		([t].[database_id] <= 4)
	UNION
	SELECT
		[t].[database_id],
			[DatabaseName]	=	[t].[name]
	FROM
		sys.databases	[t]
	WHERE
			([t].[name] LIKE '%.Smash.Dbs')
		OR	([t].[name] LIKE '%.Track.Dbs')
		OR	([t].[name] LIKE 'Rogge%')
	UNION
	SELECT
			[database_id]	= DB_ID([t].[DatabaseName]),
		[t].[DatabaseName]
	FROM (VALUES
		('DWConfiguration'),
		('DWDiagnostics'),
		('DWQueue'),
		('SSISDB'),
		('SSRS'),
		('SSRSTempDB')
		)[t]([DatabaseName])
) [s]
ON	([t].[database_id]	= [s].[database_id])
WHEN NOT MATCHED BY TARGET THEN
	INSERT ([database_id], [DatabaseName])
	VALUES ([database_id], [DatabaseName])
WHEN NOT MATCHED BY SOURCE THEN
	DELETE;
GO

GO
ALTER DATABASE [$(DatabaseName)]
    SET MULTI_USER 
    WITH ROLLBACK IMMEDIATE;


GO
PRINT N'Update complete.';


GO
