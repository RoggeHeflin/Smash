/*
Deployment script for Rogge.Smash.Svr

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "Rogge.Smash.Svr"
:setvar DefaultFilePrefix "Rogge.Smash.Svr"
:setvar DefaultDataPath ""
:setvar DefaultLogPath ""

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
USE [master];


GO

IF (DB_ID(N'$(DatabaseName)') IS NOT NULL) 
BEGIN
    ALTER DATABASE [$(DatabaseName)]
    SET SINGLE_USER WITH ROLLBACK IMMEDIATE;
    DROP DATABASE [$(DatabaseName)];
END

GO
PRINT N'Creating database $(DatabaseName)...'
GO
CREATE DATABASE [$(DatabaseName)] COLLATE SQL_Latin1_General_CP1_CI_AS
GO
USE [$(DatabaseName)];


GO
ALTER DATABASE [$(DatabaseName)]
    SET SINGLE_USER 
    WITH ROLLBACK IMMEDIATE
GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET ANSI_NULLS ON,
                ANSI_PADDING ON,
                ANSI_WARNINGS ON,
                ARITHABORT ON,
                CONCAT_NULL_YIELDS_NULL ON,
                NUMERIC_ROUNDABORT OFF,
                QUOTED_IDENTIFIER ON,
                ANSI_NULL_DEFAULT ON,
                CURSOR_DEFAULT LOCAL,
                RECOVERY SIMPLE,
                CURSOR_CLOSE_ON_COMMIT OFF,
                AUTO_CREATE_STATISTICS ON,
                AUTO_SHRINK OFF,
                AUTO_UPDATE_STATISTICS ON,
                RECURSIVE_TRIGGERS OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET ALLOW_SNAPSHOT_ISOLATION ON;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET READ_COMMITTED_SNAPSHOT ON 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET AUTO_UPDATE_STATISTICS_ASYNC OFF,
                PAGE_VERIFY NONE,
                DATE_CORRELATION_OPTIMIZATION OFF,
                DISABLE_BROKER,
                PARAMETERIZATION SIMPLE,
                SUPPLEMENTAL_LOGGING OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF IS_SRVROLEMEMBER(N'sysadmin') = 1
    BEGIN
        IF EXISTS (SELECT 1
                   FROM   [master].[dbo].[sysdatabases]
                   WHERE  [name] = N'$(DatabaseName)')
            BEGIN
                EXECUTE sp_executesql N'ALTER DATABASE [$(DatabaseName)]
    SET TRUSTWORTHY OFF,
        DB_CHAINING OFF 
    WITH ROLLBACK IMMEDIATE';
            END
    END
ELSE
    BEGIN
        PRINT N'The database settings cannot be modified. You must be a SysAdmin to apply these settings.';
    END


GO
IF IS_SRVROLEMEMBER(N'sysadmin') = 1
    BEGIN
        IF EXISTS (SELECT 1
                   FROM   [master].[dbo].[sysdatabases]
                   WHERE  [name] = N'$(DatabaseName)')
            BEGIN
                EXECUTE sp_executesql N'ALTER DATABASE [$(DatabaseName)]
    SET HONOR_BROKER_PRIORITY OFF 
    WITH ROLLBACK IMMEDIATE';
            END
    END
ELSE
    BEGIN
        PRINT N'The database settings cannot be modified. You must be a SysAdmin to apply these settings.';
    END


GO
ALTER DATABASE [$(DatabaseName)]
    SET TARGET_RECOVERY_TIME = 0 SECONDS 
    WITH ROLLBACK IMMEDIATE;


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET FILESTREAM(NON_TRANSACTED_ACCESS = OFF),
                CONTAINMENT = NONE 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET AUTO_CREATE_STATISTICS ON(INCREMENTAL = OFF),
                MEMORY_OPTIMIZED_ELEVATE_TO_SNAPSHOT = OFF,
                DELAYED_DURABILITY = DISABLED 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET QUERY_STORE (QUERY_CAPTURE_MODE = ALL, DATA_FLUSH_INTERVAL_SECONDS = 900, INTERVAL_LENGTH_MINUTES = 60, MAX_PLANS_PER_QUERY = 200, CLEANUP_POLICY = (STALE_QUERY_THRESHOLD_DAYS = 367), MAX_STORAGE_SIZE_MB = 100) 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET QUERY_STORE = OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE SCOPED CONFIGURATION SET MAXDOP = 0;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET MAXDOP = PRIMARY;
        ALTER DATABASE SCOPED CONFIGURATION SET LEGACY_CARDINALITY_ESTIMATION = OFF;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET LEGACY_CARDINALITY_ESTIMATION = PRIMARY;
        ALTER DATABASE SCOPED CONFIGURATION SET PARAMETER_SNIFFING = ON;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET PARAMETER_SNIFFING = PRIMARY;
        ALTER DATABASE SCOPED CONFIGURATION SET QUERY_OPTIMIZER_HOTFIXES = OFF;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET QUERY_OPTIMIZER_HOTFIXES = PRIMARY;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET TEMPORAL_HISTORY_RETENTION ON 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF fulltextserviceproperty(N'IsFulltextInstalled') = 1
    EXECUTE sp_fulltext_database 'enable';


GO
PRINT N'Creating Schema [smash]...';


GO
CREATE SCHEMA [smash]
    AUTHORIZATION [dbo];


GO
PRINT N'Creating Table [smash].[ExcludeDatabases]...';


GO
CREATE TABLE [smash].[ExcludeDatabases] (
    [database_id]  SMALLINT       NOT NULL,
    [DatabaseName] NVARCHAR (128) NOT NULL,
    CONSTRAINT [PK_ExcludeDatabases] PRIMARY KEY CLUSTERED ([database_id] ASC),
    CONSTRAINT [UK_ExcludeDatabases] UNIQUE NONCLUSTERED ([DatabaseName] ASC)
);


GO
PRINT N'Creating Check Constraint [smash].[CK_ExcludeDatabases_DatabaseNameLen]...';


GO
ALTER TABLE [smash].[ExcludeDatabases]
    ADD CONSTRAINT [CK_ExcludeDatabases_DatabaseNameLen] CHECK ([DatabaseName] <> '');


GO
PRINT N'Creating View [smash].[SystemInstanceCpu]...';


GO
CREATE VIEW [smash].[SystemInstanceCpu]
WITH VIEW_METADATA
AS
WITH
	[L5]	AS(SELECT [n] = 1 UNION ALL SELECT 1),					--	    2
	[L4]	AS(SELECT [n] = 1 FROM [L5] [a] CROSS JOIN [L5] [b]),	--	    4
	[L3]	AS(SELECT [n] = 1 FROM [L4] [a] CROSS JOIN [L4] [b]),	--	   16
	[L2]	AS(SELECT [n] = 1 FROM [L3] [a] CROSS JOIN [L3] [b]),	--	  256
	[L1]	AS(SELECT [n] = 1 FROM [L2] [a] CROSS JOIN [L2] [b]),	--	65536
	[v]		AS(SELECT [Items] = ROW_NUMBER() OVER(ORDER BY (SELECT(NULL))) - 1 FROM [L1])
SELECT
		[instance_id]	= CHECKSUM(@@SERVERNAME),
	[t].[ObjectIndex],

		[Instance]		= @@SERVERNAME,
		[InstanceHost]	= CAST(SERVERPROPERTY('MachineName') AS VARCHAR),
		[InstanceName]	= @@SERVICENAME,

	[t].[ObjectType],
		[ItemPcnt]		= 1.0 / COUNT(*) OVER(PARTITION BY [t].[ObjectType]),
		[ItemColor]		= [t].[ObjectIndex] % [t].[cores_per_socket]
FROM (
	SELECT DISTINCT
		[u].[cores_per_socket],
		[u].[ObjectType],
		[u].[ObjectIndex]
	FROM (
		SELECT TOP(65536)
			[s].[cores_per_socket],
				[Sockets]		= [v].[Items] / [s].[cpu_count],
				[Cores]			= [v].[Items] / ([s].[cpu_count] / [s].[cores_per_socket]),
				[Threads]		= [v].[Items]
		FROM
			[v]
		CROSS JOIN (
			SELECT
				[s].[socket_count],
				[s].[cores_per_socket],
				[s].[cpu_count]
			FROM
				sys.dm_os_sys_info	[s]
			) [s]
		WHERE
			([v].[Items] < [s].[cpu_count])
		) [t]
	UNPIVOT (
		[ObjectIndex] FOR [ObjectType] IN (
			[Sockets],
			[Cores],
			[Threads]
			)
		) [u]
	) [t];
GO
PRINT N'Creating View [smash].[SystemInstance]...';


GO
CREATE VIEW [smash].[SystemInstance]
WITH VIEW_METADATA
AS
SELECT
	[instance_id]				= CHECKSUM(@@SERVERNAME),
	[Instance]					= @@SERVERNAME,
	[InstanceHost]				= CAST(SERVERPROPERTY('MachineName') AS VARCHAR),
	[InstanceName]				= @@SERVICENAME,

	[HostPlatform]				= [h].[host_platform],
	[HostDistribution]			= [h].[host_distribution],
	[HostRelease]				= [h].[host_release],
	[HostServicePack]			= [h].[host_service_pack_level],
	[HostSku]					= [h].[host_sku],
	[HostLanguageVersion]		= [h].[os_language_version],
	[HostArchitecture]			= 'X64',
	--[HostArchitecture]			= [h].[host_architecture],	/*	Column is available in sys.dm_os_host_info	*/

	[HostContainterType]		= [s].[container_type_desc],
	[HostType]					= [s].[virtual_machine_type_desc],

	[HostLanguageName]			= [l].[name],
	[HostLanguageAlias]			= [l].[name],
	--[HostLanguageAlias]			= [l].[alias],				/*	Column is available in sys.syslanguages		*/

	[CpuSocketCount]			= [s].[socket_count],
	[CpuSocketCores]			= [s].[cores_per_socket],
	[CpuThreads]				= [s].[cpu_count],
	[CpuSocketCoreThreads]		= [s].[cpu_count] / [s].[cores_per_socket],
	[CpuHyperthreadRatio]		= [s].[hyperthread_ratio],

	[NumaNodeCount]				= [s].[numa_node_count],
	[NumaNodeDescription]		= [s].[softnuma_configuration_desc],

	[InstanceDescription]		= REPLACE(@@VERSION, N'(C)', '©'),
	[InstanceVersion]			= CONVERT(VARCHAR, SERVERPROPERTY('ProductVersion')),

	[InstanceEdition]			= CONVERT(VARCHAR, SERVERPROPERTY('Edition')),
	[InstanceProductLevel]		= CONVERT(VARCHAR, SERVERPROPERTY('ProductLevel')),
	[InstanceProductBuildType]	= CONVERT(VARCHAR, SERVERPROPERTY('ProductBuildType')),
	[InstanceLanguage]			= @@LANGUAGE,
	[InstanceProcessId]			= CONVERT(VARCHAR, SERVERPROPERTY('ProcessID')),
	
	[InstanceMemoryModel]		= [s].[sql_memory_model_desc],
	[InstanceCpuAffinity]		= [s].[affinity_type_desc],
	[InstanceStartTime]			= [s].[sqlserver_start_time],

	[WokerCountTotal]			= [s].[max_workers_count],
	[SchedulerCount]			= [s].[scheduler_count],
	[SchedulerCountTotal]		= [s].[scheduler_total_count],

	[MemoryState]				= [m].[system_memory_state_desc],

	[MemoryPhysicalGb]			= [s].[physical_memory_kb]				/ 1000000.0,
	[MemoryVirtualGb]			= [s].[virtual_memory_kb]				/ 1000000.0,
	[MemoryCommittedGb]			= [s].[committed_kb]					/ 1000000.0,
	[MemoryCommittedTargetGb]	= [s].[committed_target_kb]				/ 1000000.0,
	[MemoryStackSizeMb]			= [s].[stack_size_in_bytes]				/ 1000000.0,

	[MemoryPhysicalAvailableGb]	= [m].[available_physical_memory_kb]	/ 1000000.0,
	[MemoryPageFileTotalGb]		= [m].[total_page_file_kb]				/ 1000000.0,
	[MemoryPageFileAvailableGb]	= [m].[available_page_file_kb]			/ 1000000.0,

	[MemorySystemCacheMb]		= [m].[system_cache_kb]					/ 1000.0,
	[MemoryKernelPagedMb]		= [m].[kernel_paged_pool_kb]			/ 1000.0,
	[MemoryKernelNonpagedMb]	= [m].[kernel_nonpaged_pool_kb]			/ 1000.0

FROM
	sys.dm_os_host_info			[h]
INNER JOIN
	sys.fulltext_languages		[l]
		ON	([h].[os_language_version]	=	[l].[lcid])
--INNER JOIN
--	sys.syslanguages			[l]
--		ON	([h].[os_language_version]	=	[l].[lcid])
CROSS JOIN
	sys.dm_os_sys_info			[s]
CROSS JOIN
	sys.dm_os_sys_memory		[m];
GO
PRINT N'Creating View [smash].[SystemConfiguration]...';


GO
CREATE VIEW [smash].[SystemConfiguration]
WITH VIEW_METADATA
AS
SELECT
		[instance_id]				= CHECKSUM(@@SERVERNAME),
	[t].[configuration_id],

		[Instance]					= @@SERVERNAME,
		[InstanceHost]				= CAST(SERVERPROPERTY('MachineName') AS VARCHAR),
		[InstanceName]				= @@SERVICENAME,

		[ConfigurationName]			= [t].[name],
		[ConfigurationDescription]	= [t].[description],

		[CurrentValue]				= [t].[value],
		[InUseValue]				= [t].[value_in_use],

		[MinimumValue]				= [t].[minimum],
		[MaximumValue]				= [t].[maximum],

		[IsDynamic]					= CASE [t].[is_dynamic]
										WHEN 0	THEN 'Satic'
										WHEN 1	THEN 'Dynamic'
										END,

		[IsAdvanced]				= CASE [t].[is_advanced]
										WHEN 0	THEN 'Standard'
										WHEN 1	THEN 'Advanced'
										END
FROM
	sys.configurations	[t];
GO
PRINT N'Creating Function [smash].[SystemDatabaseType]...';


GO
CREATE FUNCTION [smash].[SystemDatabaseType]
(
	@DatabaseId		INT
)
RETURNS VARCHAR(8)
WITH SCHEMABINDING, RETURNS NULL ON NULL INPUT, INLINE = ON
AS
BEGIN

	DECLARE	@DatabaseType	VARCHAR(8)	= 'User';

	SET	@DatabaseType =
	CASE
		WHEN (@DatabaseId <= 4)			THEN 'System'

		WHEN (db_name(@DatabaseId) IN (
				N'DWConfiguration',
				N'DWDiagnostics',
				N'DWQueue',
				N'SSISDB',
				N'SSRS',
				N'SSRSTempDB'
				)
			)							THEN 'Support'

		WHEN (db_name(@DatabaseId) LIKE N'AdventureWorks%')
										THEN 'Training'
	ELSE
		@DatabaseType
	END;

	RETURN @DatabaseType;

END;
GO
PRINT N'Creating View [smash].[SystemDatabases]...';


GO
CREATE VIEW [smash].[SystemDatabases]
WITH VIEW_METADATA
AS
SELECT
		[instance_id]				= CHECKSUM(@@SERVERNAME),
	[t].[database_id],
	[t].[source_database_id],

		[Instance]					= @@SERVERNAME,
		[InstanceHost]				= CAST(SERVERPROPERTY('MachineName') AS VARCHAR),
		[InstanceName]				= @@SERVICENAME,

		[DatabaseType]				= [smash].[SystemDatabaseType]([t].[database_id]),

		[DatabaseName]				= [t].[name],

		[SourceDatabase]			= DB_NAME([t].[source_database_id]),
		[DatabaseOwner]				= SUSER_SNAME([t].[owner_sid]),

		[DatabaseCreation]			= [t].[create_date],

		[CompatibilityLevel]		= CASE [t].[compatibility_level]
										WHEN  70	THEN '7.0'
										WHEN  80	THEN '2008 (8.x)'
										WHEN  90	THEN '2008 (9.x)'
										WHEN 100	THEN '2008 (10.x)'
										WHEN 110	THEN '2012 (11.x)'
										WHEN 120	THEN '2014 (12.x)'
										WHEN 130	THEN '2016 (13.x)'
										WHEN 140	THEN '2017 (14.x)'
										WHEN 150	THEN '2019 (15.x)'
										ELSE CONVERT(VARCHAR(3), [t].[compatibility_level])
										END,

		[CollationName]				= [t].[collation_name],

		[UserAcess]					= CASE [t].[user_access]
										WHEN 0	THEN 'Multi User'
										WHEN 1	THEN 'Single User'
										WHEN 2	THEN 'Restricted User'
										END,

		[ReadOnly]					= CASE [t].[is_read_only]
										WHEN 0	THEN 'Read Write'
										WHEN 1	THEN 'Read Only'
										END,

		[AutoClose]					= CASE [t].[is_auto_close_on]
										WHEN 0	THEN 'Off'
										WHEN 1	THEN 'On'
										END,

		[AutoShrink]				= CASE [t].[is_auto_shrink_on]
										WHEN 0	THEN 'Off'
										WHEN 1	THEN 'On'
										END,

		[DatabaseState]				= CASE [t].[state]
										WHEN  0	THEN 'Online'
										WHEN  1	THEN 'Restoring'
										WHEN  2	THEN 'Recovering'
										WHEN  3	THEN 'Recovery Pending'
										WHEN  4	THEN 'Suspect'
										WHEN  5	THEN 'Emergency'
										WHEN  6	THEN 'Offline'
										WHEN  7	THEN 'Copying'
										WHEN 10	THEN 'Offline (Secondary)'
										END,

		[IsInStandby]				= CASE [t].[is_in_standby]
										WHEN 0	THEN 'Off'
										WHEN 1	THEN 'On'
										END,

		[IsCleanlyShutdown]			= CASE [t].[is_cleanly_shutdown]
										WHEN 0	THEN 'No'
										WHEN 1	THEN 'Yes'
										END,

		[IsSupplementalLoggingEnabled]	= CASE [t].[is_supplemental_logging_enabled]
										WHEN 0	THEN 'Off'
										WHEN 1	THEN 'On'
										END,

		[SnapshotIsolationState]	= CASE [t].[snapshot_isolation_state]
										WHEN 0	THEN 'Off'
										WHEN 1	THEN 'On'
										WHEN 2	THEN 'Transition to Off'
										WHEN 3	THEN 'Transition to On'
										END,

		[IsReadCommittedSnapshot]	= CASE [t].[is_read_committed_snapshot_on]
										WHEN 0	THEN 'Off'
										WHEN 1	THEN 'On'
										END,

		[RecoveryModel]				= CASE [t].[recovery_model]
										WHEN 1	THEN 'Full'
										WHEN 2	THEN 'Bulk Logged'
										WHEN 3	THEN 'Simple'
										END,

		[PageVerify]				= CASE [t].[page_verify_option]
										WHEN 0	THEN 'None'
										WHEN 1	THEN 'Torn Page Detection'
										WHEN 2	THEN 'Checksum'
										END,

		[IsAutoCreateStatsOn]		= CASE [t].[is_auto_create_stats_on]
										WHEN 0	THEN 'Off'
										WHEN 1	THEN 'On'
										END,

		[IsAutoCreateStatsIncrementalOn]	= CASE [t].[is_auto_create_stats_incremental_on]
										WHEN 0	THEN 'Off'
										WHEN 1	THEN 'On'
										END,

		[IsAutoUpdateStatsOn]		= CASE [t].[is_auto_update_stats_on]
										WHEN 0	THEN 'Off'
										WHEN 1	THEN 'On'
										END,

		[IsAutoUpdateStatsAsyncOn]	= CASE [t].[is_auto_update_stats_async_on]
										WHEN 0	THEN 'Off'
										WHEN 1	THEN 'On'
										END,

		[IsAnsiNullDefaultOn]		= CASE [t].[is_ansi_null_default_on]
										WHEN 0	THEN 'Off'
										WHEN 1	THEN 'On'
										END,

		[IsAnsiNullsOn]				= CASE [t].[is_ansi_nulls_on]
										WHEN 0	THEN 'Off'
										WHEN 1	THEN 'On'
										END,

		[IsAnsiPaddingOn]			= CASE [t].[is_ansi_padding_on]
										WHEN 0	THEN 'Off'
										WHEN 1	THEN 'On'
										END,

		[IsAnsiWarningsOn]			= CASE [t].[is_ansi_warnings_on]
										WHEN 0	THEN 'Off'
										WHEN 1	THEN 'On'
										END,

		[IsArithabortOn]			= CASE [t].[is_arithabort_on]
										WHEN 0	THEN 'Off'
										WHEN 1	THEN 'On'
										END,

		[IsConcatNullYieldsNullOn]	= CASE [t].[is_concat_null_yields_null_on]
										WHEN 0	THEN 'Off'
										WHEN 1	THEN 'On'
										END,

		[IsNumericRoundabortOn]		= CASE [t].[is_numeric_roundabort_on]
										WHEN 0	THEN 'Off'
										WHEN 1	THEN 'On'
										END,

		[IsQuotedIdentifierOn]		= CASE [t].[is_quoted_identifier_on]
										WHEN 0	THEN 'Off'
										WHEN 1	THEN 'On'
										END,

		[IsRecursiveTriggersOn]		= CASE [t].[is_recursive_triggers_on]
										WHEN 0	THEN 'Off'
										WHEN 1	THEN 'On'
										END,

		[IsCursorCloseOnCommitOn]	= CASE [t].[is_cursor_close_on_commit_on]
										WHEN 0	THEN 'Off'
										WHEN 1	THEN 'On'
										END,

		[IsLocalCursorDefault]		= CASE [t].[is_local_cursor_default]
										WHEN 0	THEN 'Global'
										WHEN 1	THEN 'Local'
										END,

		[IsFulltextEnabled]			= CASE [t].[is_fulltext_enabled]
										WHEN 0	THEN 'Off'
										WHEN 1	THEN 'On'
										END,

		[IsTrustworthyOn]			= CASE [t].[is_trustworthy_on]
										WHEN 0	THEN 'Off'
										WHEN 1	THEN 'On'
										END,

		[IsDbChainingOn]			= CASE [t].[is_db_chaining_on]
										WHEN 0	THEN 'Off'
										WHEN 1	THEN 'On'
										END,

		[ParameterizationForced]	= CASE [t].[is_parameterization_forced]
										WHEN 0	THEN 'Simple'
										WHEN 1	THEN 'Forced'
										END,

		[IsMasterKeyEncryptedByServer]	= CASE [t].[is_master_key_encrypted_by_server]
										WHEN 0	THEN 'No'
										WHEN 1	THEN 'Yes'
										END,

		[IsQueryStoreOn]			= CASE [t].[is_query_store_on]
										WHEN 0	THEN 'Off'
										WHEN 1	THEN 'On'
										END,

		[IsPublished]				= CASE [t].[is_published]
										WHEN 0	THEN 'No'
										WHEN 1	THEN 'Yes'
										END,

		[IsMergePublished]			= CASE [t].[is_merge_published]
										WHEN 0	THEN 'No'
										WHEN 1	THEN 'Yes'
										END,

		[IsDistributor]				= CASE [t].[is_distributor]
										WHEN 0	THEN 'No'
										WHEN 1	THEN 'Yes'
										END,

		[IsSyncWithBackup]			= CASE [t].[is_sync_with_backup]
										WHEN 0	THEN 'No'
										WHEN 1	THEN 'Yes'
										END,

		[ServiceBroker]				= [t].[service_broker_guid],

		[IsBrokerEnabled]			= CASE [t].[is_broker_enabled]
										WHEN 0	THEN 'No'
										WHEN 1	THEN 'Yes'
										END,

		[LogReuseWait]				= CASE [t].[log_reuse_wait]
										WHEN  0	THEN 'Nothing'
										WHEN  1	THEN 'Checkpoint'
										WHEN  2	THEN 'Log Backup'
										WHEN  3	THEN 'Active Backup or Restore'
										WHEN  4	THEN 'Active Transaction'
										WHEN  5	THEN 'Mirroring'
										WHEN  6	THEN 'Replication'
										WHEN  7	THEN 'Snapshot Creation'
										WHEN  8	THEN 'Log Scan'
										WHEN  9	THEN 'Always On Replica'
										WHEN 10	THEN 'Internal Use (10)'
										WHEN 11	THEN 'Internal Use (11)'
										WHEN 12	THEN 'Internal Use (12)'
										WHEN 13	THEN 'Oldest Page'
										WHEN 14	THEN 'Other'
										WHEN 16	THEN 'XTP Checkpoint'
										WHEN 17	THEN 'sLog Scanning'
										END,

		[IsDateCorrelationOn]		= CASE [t].[is_date_correlation_on]
										WHEN 0	THEN 'Off'
										WHEN 1	THEN 'On'
										END,

		[IsCdcEnabled]				= CASE [t].[is_cdc_enabled]
										WHEN 0	THEN 'Off'
										WHEN 1	THEN 'On'
										END,

		[IsEncrypted]				= CASE [t].[is_encrypted]
										WHEN 0	THEN 'No'
										WHEN 1	THEN 'Yes'
										END,

		[IsHonorBrokerPriorityOn]	= CASE [t].[is_honor_broker_priority_on]
										WHEN 0	THEN 'Off'
										WHEN 1	THEN 'On'
										END,

		[ReplicaId]						= [t].[replica_id],
		[GroupDatabaseId]				= [t].[group_database_id],
		[ResourcePoolId]				= [t].[resource_pool_id],

		[DefaultLanguageLcid]			= [t].[default_language_lcid],
		[DefaultLanguageName]			= [t].[default_language_name],
		[DefaultFulltextLanguageLcid]	= [t].[default_fulltext_language_lcid],
		[DefaultFulltextLanguageName]	= [t].[default_fulltext_language_name],

		[IsNestedTriggersOn]		= CASE [t].[is_nested_triggers_on]
										WHEN 0	THEN 'Off'
										WHEN 1	THEN 'On'
										END,

		[IsTransformNoiseWordsOn]	= CASE [t].[is_transform_noise_words_on]
										WHEN 0	THEN 'Off'
										WHEN 1	THEN 'On'
										END,

		[TwoDigitYearCutoff]		= [t].[two_digit_year_cutoff],

		[Containment]				= CASE [t].[containment]
										WHEN 0	THEN 'None'
										WHEN 1	THEN 'Partial'
										END,

		[TargetRecoveryTimeSeconds]	= [t].[target_recovery_time_in_seconds],

		[DelayedDurability]			= CASE [t].[delayed_durability]
										WHEN  0	THEN 'Disabled'
										WHEN  1	THEN 'Allowed'
										WHEN  2	THEN 'Forced'
										END,

		[IsMemoryOptimizedElevateToSnapshotOn]	= CASE [t].[is_memory_optimized_elevate_to_snapshot_on]
										WHEN 0	THEN 'Off'
										WHEN 1	THEN 'On'
										END,

		[IsFederationMember]		= CASE [t].[is_federation_member]
										WHEN 0	THEN 'No'
										WHEN 1	THEN 'Yes'
										END,

		[IsRemoteDataArchiveEnabled]	= CASE [t].[is_remote_data_archive_enabled]
										WHEN 0	THEN 
											CASE WHEN ([t].[name] LIKE 'Rogge%') THEN 'On' ELSE 'Off' END
										WHEN 1	THEN 'On'
										END,

		[IsMixedPageAllocationOn]	= CASE [t].[is_mixed_page_allocation_on]
										WHEN 0	THEN 'Off'
										WHEN 1	THEN 'On'
										END,

		[IsTemporalHistoryRetentionEnabled]	= CASE [t].[is_temporal_history_retention_enabled]
										WHEN 0	THEN 'Off'
										WHEN 1	THEN 'On'
										END,

		[CatalogCollationType]		= CASE [t].[catalog_collation_type]
										WHEN 0	THEN 'Database Default'
										WHEN 1	THEN 'SQL_Latin_1_General_CP1_CI_AS'
										END,

		[PhysicalDatabaseName]		= [t].[physical_database_name],

		--[IsResultSetCachingOn]		= CASE [t].[is_result_set_caching_on]
		--								WHEN 0	THEN 'Off'
		--								WHEN 1	THEN 'On'
		--								END,

		--[IsAcceleratedDatabaseRecoveryOn]	= CASE [t].[is_accelerated_database_recovery_on]
		--								WHEN 0	THEN 'Off'
		--								WHEN 1	THEN 'On'
		--								END,

		--[IsTempdbSpillToRemoteStore]	= CASE [t].[is_tempdb_spill_to_remote_store]
		--								WHEN 0	THEN 'Off'
		--								WHEN 1	THEN 'On'
		--								END,

		--[IsStalePageDetectionOn]		= CASE[t].[is_stale_page_detection_on]
		--								WHEN 0	THEN 'Off'
		--								WHEN 1	THEN 'On'
		--								END,

		--[IsMemoryOptimizedEnabled]		= CASE [t].[is_memory_optimized_enabled]
		--								WHEN 0	THEN 'Off'
		--								WHEN 1	THEN 'On'
		--								END,

		[vizTileMapIndex]			= ROW_NUMBER() OVER(PARTITION BY [smash].[SystemDatabaseType]([t].[database_id]) ORDER BY DB_NAME([t].[database_id]) ASC),
		[vizTileMapRow]				= ROW_NUMBER() OVER(PARTITION BY [smash].[SystemDatabaseType]([t].[database_id]) ORDER BY DB_NAME([t].[database_id]) ASC),
		[vizTileMapCol]				= ROW_NUMBER() OVER(PARTITION BY [smash].[SystemDatabaseType]([t].[database_id]) ORDER BY DB_NAME([t].[database_id]) ASC)

FROM
	sys.databases	[t];
GO
PRINT N'Creating View [smash].[SystemVolumes]...';


GO
CREATE VIEW [smash].[SystemVolumes]
WITH VIEW_METADATA
AS
SELECT
		[instance_id]			= CHECKSUM(@@SERVERNAME),
	[f].[database_id],
	[f].[file_id],

		[Instance]				= @@SERVERNAME,
		[InstanceHost]			= CAST(SERVERPROPERTY('MachineName') AS VARCHAR),
		[InstanceName]			= @@SERVICENAME,

		[DatabaseType]			= [smash].[SystemDatabaseType]([f].[database_id]),
		[DatabaseName]			= DB_NAME([f].[database_id]),
		[FileType]				= CASE [f].[type]
									WHEN	0	THEN 'Rows'
									WHEN	1	THEN 'Log'
									END,

		[FileName]				= [f].[name],
		[FileNamePhysical]		= [f].[physical_name],

		[FileState]				= CASE [f].[state]
									WHEN	0	THEN 'Online'
									WHEN	1	THEN 'Restoring'
									WHEN	2	THEN 'Recovering'
									WHEN	3	THEN 'Recovery Pending'
									WHEN	4	THEN 'Suspect'
									WHEN	5	THEN 'Internal'
									WHEN	6	THEN 'Offline'
									WHEN	7	THEN 'Defunct'
									WHEN	8	THEN 'Online'
									END,

		[FileSizePages]			= [f].[size],
		[FileSizeKb]			= CONVERT(FLOAT, [f].[size]) * 8.0 / 1000,
		[FileSizeMb]			= CONVERT(FLOAT, [f].[size]) * 8.0 / 1000000.0,
		[FileSizeGb]			= CONVERT(FLOAT, [f].[size]) * 8.0 / 1000000000.0,

		[FileSizeMax]			= [f].[max_size],

		[FileSizeGrowthKb]		= IIF(([f].[is_percent_growth] = 0), [f].[growth],			NULL),
		[FileSizeGrowthMb]		= IIF(([f].[is_percent_growth] = 0), [f].[growth] / 1000.0, NULL),
		[FileSizeGrowthPcnt]	= IIF(([f].[is_percent_growth] = 1), [f].[growth] / 100.0,	NULL),

		[VolumeMountPoint]		= [v].[volume_mount_point],
		[VolumeNameLogical]		= [v].[logical_volume_name],
		[VolumeFileType]		= [v].[file_system_type],

		[VolumeSizeTotalMb]		= CONVERT(FLOAT, [v].[total_bytes])							/ 1000000.0,	--	1048576.0,
		[VolumeSizeAvailableMb]	= CONVERT(FLOAT, [v].[available_bytes])						/ 1000000.0,
		[VolumeSizeUsedMb]		= CONVERT(FLOAT, [v].[total_bytes] - [v].[available_bytes])	/ 1000000.0,

		[VolumeSizeTotalGb]		= CONVERT(FLOAT, [v].[total_bytes])							/ 1000000000.0,	--	1073741824.0
		[VolumeSizeAvailableGb]	= CONVERT(FLOAT, [v].[available_bytes])						/ 1000000000.0,
		[VolumeSizeUsedGb]		= CONVERT(FLOAT, [v].[total_bytes] - [v].[available_bytes])	/ 1000000000.0,

		[VolumeAvailablePcnt]	=		CONVERT(FLOAT, [v].[available_bytes]) / CONVERT(FLOAT, [v].[total_bytes]),
		[VolumeUsedPcnt]		= 1.0 - CONVERT(FLOAT, [v].[available_bytes]) / CONVERT(FLOAT, [v].[total_bytes])
FROM
	sys.master_files		[f]
CROSS APPLY
	sys.dm_os_volume_stats([f].[database_id], [f].[file_id])	[v];
GO
PRINT N'Creating Procedure [smash].[Select_DatabaseIndexesOperational]...';


GO
CREATE PROCEDURE [smash].[Select_DatabaseIndexesOperational]
AS
BEGIN

	SET NOCOUNT ON;
	SET LOCK_TIMEOUT 100;
	SET DEADLOCK_PRIORITY HIGH;

	DECLARE @TxnCount		INT				= @@TRANCOUNT;
	DECLARE @TxnActive		VARCHAR(32)		= REPLACE(CONVERT(VARCHAR(36), NEWID(), 0), '-', '');
	DECLARE @ErrorCode		INT				= 0;

	IF (@TxnCount = 0) BEGIN TRANSACTION @TxnActive ELSE SAVE TRANSACTION @TxnActive;
	BEGIN TRY
	-----------------------------------------------------------------------------------------------

		DROP TABLE IF EXISTS #ReturnTable_DatabaseIndexesOperational;

		CREATE TABLE #ReturnTable_DatabaseIndexesOperational
		(
			[ReturnTableId]					INT					NOT	NULL	IDENTITY(1, 1) NOT FOR REPLICATION,

			[instance_id]					INT					NOT	NULL,
			[database_id]					SMALLINT			NOT	NULL,
			[schema_id]						INT					NOT	NULL,
			[object_id]						INT					NOT	NULL,
			[index_id]						INT					NOT	NULL,

			[partition_id]					BIGINT				NOT	NULL,
			[partition_number]				INT					NOT	NULL,
			[hobt_id]						BIGINT				NOT	NULL,

			[Instance]						NVARCHAR(128)		NOT	NULL,
			[InstanceHost]					NVARCHAR(128)		NOT	NULL,
			[InstanceName]					NVARCHAR(128)		NOT	NULL,

			[DatabaseType]					VARCHAR(8)			NOT	NULL,
			[ObjectGroup]					VARCHAR(40)				NULL,
			[ObjectType]					VARCHAR(40)				NULL,

			[DatabaseName]					NVARCHAR(128)		NOT	NULL,
			[SchemaName]					NVARCHAR(128)		NOT	NULL,
			[ObjectName]					NVARCHAR(128)		NOT	NULL,
			[IndexName]						NVARCHAR(128)		NOT	NULL,

			[IndexType]						VARCHAR(16)			NOT	NULL,
			[IndexTypeClustering]			VARCHAR(16)			NOT	NULL,

			[IsPrimaryKey]					VARCHAR(3)			NOT	NULL,
			[IsUnique]						VARCHAR(3)			NOT	NULL,
			[IsUniqueConstraint]			VARCHAR(3)			NOT	NULL,
			[IsSingleColumn]				VARCHAR(3)			NOT	NULL,

			[ColumnsKey]					NVARCHAR(MAX)			NULL,
			[ColumnsKeyAll]					NVARCHAR(MAX)			NULL,
			[ColumnsIncluded]				NVARCHAR(MAX)			NULL,
			[ColumnsAll]					NVARCHAR(MAX)			NULL,

			[FileGroup]						NVARCHAR(128)		NOT	NULL,
			[FileGroupDescription]			VARCHAR(24)			NOT	NULL,
			[FileGroupIsDefault]			VARCHAR(3)			NOT	NULL,
			[FileGroupIsSystem]				VARCHAR(3)			NOT	NULL,

			[IgnoreDuplicateKey]			VARCHAR(3)			NOT	NULL,

			[FillFactor]					TINYINT				NOT	NULL,

			[IsPadded]						VARCHAR(3)			NOT	NULL,
			[IsEnabled]						VARCHAR(3)			NOT	NULL,
			[IsDisabled]					VARCHAR(3)			NOT	NULL,
			[IsHypothetical]				VARCHAR(3)			NOT	NULL,
			[IsIgnoredInOptimization]		VARCHAR(3)			NOT	NULL,
			[AllowRowLocks]					VARCHAR(3)			NOT	NULL,
			[AllowPageLocks]				VARCHAR(3)			NOT	NULL,

			[IsFiltered]					VARCHAR(3)			NOT	NULL,
			[FilterDefinition]				NVARCHAR(MAX)			NULL,

			[CompressionDelayMinutes]		INT						NULL,

			[SuppressDupKeyMessages]		VARCHAR(3)			NOT	NULL,
			[IsAutoCreated]					VARCHAR(3)			NOT	NULL,
			[OptimizeForSequentialKey]		VARCHAR(3)				NULL,

			[RowLockPercent]				FLOAT				NOT	NULL,
			[RowLockWaitAverageMs]			FLOAT				NOT	NULL,

			[LeafInsertCount]				BIGINT				NOT	NULL,
			[LeafUpdateCount]				BIGINT				NOT	NULL,
			[LeafDeleteCount]				BIGINT				NOT	NULL,
			[LeafGhostCount]				BIGINT				NOT	NULL,
			[LeafAllocationCount]			BIGINT				NOT	NULL,
			[LeafPageMergeCount]			BIGINT				NOT	NULL,

			[NonleafInsertCount]			BIGINT				NOT	NULL,
			[NonleafUpdateCount]			BIGINT				NOT	NULL,
			[NonleafDeleteCount]			BIGINT				NOT	NULL,
			[NonleafAllocationCount]		BIGINT				NOT	NULL,
			[NonleafPageMergeCount]			BIGINT				NOT	NULL,

			[PageCompressionAttemptCount]	BIGINT				NOT	NULL,
			[PageCompressionSuccessCount]	BIGINT				NOT	NULL,

			[PageIoLatchWaitCount]			BIGINT				NOT	NULL,
			[PageIoLatchWaitMs]				BIGINT				NOT	NULL,
			[PageLatchWaitCount]			BIGINT				NOT	NULL,
			[PageLatchWaitMs]				BIGINT				NOT	NULL,

			[RowLockCount]					BIGINT				NOT	NULL,
			[RowLockWaitCount]				BIGINT				NOT	NULL,
			[RowLockWaitMs]					BIGINT				NOT	NULL,

			[PageLockCount]					BIGINT				NOT	NULL,
			[PageLockWaitCount]				BIGINT				NOT	NULL,
			[PageLockWaitMs]				BIGINT				NOT	NULL,

			[RowOverflowFetchBytes]			BIGINT				NOT	NULL,
			[RowOverflowFetchPages]			BIGINT				NOT	NULL,

			[TreePageIoLatchWaitCount]		BIGINT				NOT	NULL,
			[TreePageIoLatchWaitMs]			BIGINT				NOT	NULL,
			[TreePageLatchWaitCount]		BIGINT				NOT	NULL,
			[TreePageLatchWaitMs]			BIGINT				NOT	NULL,

			[LobFetchBytes]					BIGINT				NOT	NULL,
			[LobFetchPages]					BIGINT				NOT	NULL,
			[LobOrphanCreateCount]			BIGINT				NOT	NULL,
			[LobOrphanInsertCount]			BIGINT				NOT	NULL,

			[IndexLockPromotionAttemptCount]	BIGINT			NOT	NULL,
			[IndexLockPromotionCount]		BIGINT				NOT	NULL,

			[ColumnValuePullInRowCount]		BIGINT				NOT	NULL,
			[ColumnValuePushOffRowCount]	BIGINT				NOT	NULL,

			[RangeScanCount]				BIGINT				NOT	NULL,
			[SingletonLookupCount]			BIGINT				NOT	NULL,
			[ForwardedFetchCount]			BIGINT				NOT	NULL,

			PRIMARY KEY CLUSTERED([ReturnTableId]	ASC)
		);

		DECLARE	@SqlBase		NVARCHAR(MAX)	= N'
		IF (OBJECT_ID(''[$(DatabaseName)].[smash].[DatabaseIndexesOperational]'') IS NOT NULL)
		BEGIN

			INSERT INTO #ReturnTable_DatabaseIndexesOperational	WITH(TABLOCK)
			(
				[instance_id],
				[database_id],
				[schema_id],
				[object_id],
				[index_id],

				[partition_id],
				[partition_number],
				[hobt_id],

				[Instance],
				[InstanceHost],
				[InstanceName],

				[DatabaseType],
				[ObjectGroup],
				[ObjectType],

				[DatabaseName],
				[SchemaName],
				[ObjectName],
				[IndexName],

				[IndexType],
				[IndexTypeClustering],

				[IsPrimaryKey],
				[IsUnique],
				[IsUniqueConstraint],
				[IsSingleColumn],

				[ColumnsKey],
				[ColumnsKeyAll],
				[ColumnsIncluded],
				[ColumnsAll],

				[FileGroup],
				[FileGroupDescription],
				[FileGroupIsDefault],
				[FileGroupIsSystem],

				[IgnoreDuplicateKey],

				[FillFactor],

				[IsPadded],
				[IsEnabled],
				[IsDisabled],
				[IsHypothetical],
				[IsIgnoredInOptimization],
				[AllowRowLocks],
				[AllowPageLocks],

				[IsFiltered],
				[FilterDefinition],

				[CompressionDelayMinutes],

				[SuppressDupKeyMessages],
				[IsAutoCreated],
				[OptimizeForSequentialKey],

				[RowLockPercent],
				[RowLockWaitAverageMs],

				[LeafInsertCount],
				[LeafUpdateCount],
				[LeafDeleteCount],
				[LeafGhostCount],
				[LeafAllocationCount],
				[LeafPageMergeCount],

				[NonleafInsertCount],
				[NonleafUpdateCount],
				[NonleafDeleteCount],
				[NonleafAllocationCount],
				[NonleafPageMergeCount],

				[PageCompressionAttemptCount],
				[PageCompressionSuccessCount],

				[PageIoLatchWaitCount],
				[PageIoLatchWaitMs],
				[PageLatchWaitCount],
				[PageLatchWaitMs],

				[RowLockCount],
				[RowLockWaitCount],
				[RowLockWaitMs],

				[PageLockCount],
				[PageLockWaitCount],
				[PageLockWaitMs],

				[RowOverflowFetchBytes],
				[RowOverflowFetchPages],

				[TreePageIoLatchWaitCount],
				[TreePageIoLatchWaitMs],
				[TreePageLatchWaitCount],
				[TreePageLatchWaitMs],

				[LobFetchBytes],
				[LobFetchPages],
				[LobOrphanCreateCount],
				[LobOrphanInsertCount],

				[IndexLockPromotionAttemptCount],
				[IndexLockPromotionCount],

				[ColumnValuePullInRowCount],
				[ColumnValuePushOffRowCount],

				[RangeScanCount],
				[SingletonLookupCount],
				[ForwardedFetchCount]
			)
			SELECT
				[t].[instance_id],
				[t].[database_id],
				[t].[schema_id],
				[t].[object_id],
				[t].[index_id],

				[t].[partition_id],
				[t].[partition_number],
				[t].[hobt_id],

				[t].[Instance],
				[t].[InstanceHost],
				[t].[InstanceName],

				[t].[DatabaseType],
				[t].[ObjectGroup],
				[t].[ObjectType],

				[t].[DatabaseName],
				[t].[SchemaName],
				[t].[ObjectName],
				[t].[IndexName],

				[t].[IndexType],
				[t].[IndexTypeClustering],

				[t].[IsPrimaryKey],
				[t].[IsUnique],
				[t].[IsUniqueConstraint],
				[t].[IsSingleColumn],

				[t].[ColumnsKey],
				[t].[ColumnsKeyAll],
				[t].[ColumnsIncluded],
				[t].[ColumnsAll],

				[t].[FileGroup],
				[t].[FileGroupDescription],
				[t].[FileGroupIsDefault],
				[t].[FileGroupIsSystem],

				[t].[IgnoreDuplicateKey],

				[t].[FillFactor],

				[t].[IsPadded],
				[t].[IsEnabled],
				[t].[IsDisabled],
				[t].[IsHypothetical],
				[t].[IsIgnoredInOptimization],
				[t].[AllowRowLocks],
				[t].[AllowPageLocks],

				[t].[IsFiltered],
				[t].[FilterDefinition],

				[t].[CompressionDelayMinutes],

				[t].[SuppressDupKeyMessages],
				[t].[IsAutoCreated],
				[t].[OptimizeForSequentialKey],

				[t].[RowLockPercent],
				[t].[RowLockWaitAverageMs],

				[t].[LeafInsertCount],
				[t].[LeafUpdateCount],
				[t].[LeafDeleteCount],
				[t].[LeafGhostCount],
				[t].[LeafAllocationCount],
				[t].[LeafPageMergeCount],

				[t].[NonleafInsertCount],
				[t].[NonleafUpdateCount],
				[t].[NonleafDeleteCount],
				[t].[NonleafAllocationCount],
				[t].[NonleafPageMergeCount],

				[t].[PageCompressionAttemptCount],
				[t].[PageCompressionSuccessCount],

				[t].[PageIoLatchWaitCount],
				[t].[PageIoLatchWaitMs],
				[t].[PageLatchWaitCount],
				[t].[PageLatchWaitMs],

				[t].[RowLockCount],
				[t].[RowLockWaitCount],
				[t].[RowLockWaitMs],

				[t].[PageLockCount],
				[t].[PageLockWaitCount],
				[t].[PageLockWaitMs],

				[t].[RowOverflowFetchBytes],
				[t].[RowOverflowFetchPages],

				[t].[TreePageIoLatchWaitCount],
				[t].[TreePageIoLatchWaitMs],
				[t].[TreePageLatchWaitCount],
				[t].[TreePageLatchWaitMs],

				[t].[LobFetchBytes],
				[t].[LobFetchPages],
				[t].[LobOrphanCreateCount],
				[t].[LobOrphanInsertCount],

				[t].[IndexLockPromotionAttemptCount],
				[t].[IndexLockPromotionCount],

				[t].[ColumnValuePullInRowCount],
				[t].[ColumnValuePushOffRowCount],

				[t].[RangeScanCount],
				[t].[SingletonLookupCount],
				[t].[ForwardedFetchCount]
			FROM
				[$(DatabaseName)].[smash].[DatabaseIndexesOperational]	[t];

		END;';

		DECLARE @DbName			NVARCHAR(128)	= N'';
		DECLARE @SqlCommand		NVARCHAR(MAX);

		WHILE (@DbName IS NOT NULL)
		BEGIN

			SELECT
				@DbName = MIN([d].[name])
			FROM
				sys.databases	[d]
			WHERE
					([d].[name]	> @DbName)
				--AND	([d].[database_id] NOT IN (SELECT [x].[database_id] FROM [smash].[ExcludeDatabases] [x]));

			SET @SqlCommand = REPLACE(@SqlBase, N'$(DatabaseName)', @DbName);

			PRINT CONVERT(NCHAR(23), SYSDATETIME(), 121) + NCHAR(9) + N'Querying database [' + @DbName + N']';

			EXECUTE sp_executesql @SqlCommand;

		END;

		SELECT
			[t].[instance_id],
			[t].[database_id],
			[t].[schema_id],
			[t].[object_id],
			[t].[index_id],

			[t].[partition_id],
			[t].[partition_number],
			[t].[hobt_id],

			[t].[Instance],
			[t].[InstanceHost],
			[t].[InstanceName],

			[t].[DatabaseType],
			[t].[ObjectGroup],
			[t].[ObjectType],

			[t].[DatabaseName],
			[t].[SchemaName],
			[t].[ObjectName],
			[t].[IndexName],

			[t].[IndexType],
			[t].[IndexTypeClustering],

			[t].[IsPrimaryKey],
			[t].[IsUnique],
			[t].[IsUniqueConstraint],
			[t].[IsSingleColumn],

			[t].[ColumnsKey],
			[t].[ColumnsKeyAll],
			[t].[ColumnsIncluded],
			[t].[ColumnsAll],

			[t].[FileGroup],
			[t].[FileGroupDescription],
			[t].[FileGroupIsDefault],
			[t].[FileGroupIsSystem],

			[t].[IgnoreDuplicateKey],

			[t].[FillFactor],

			[t].[IsPadded],
			[t].[IsEnabled],
			[t].[IsDisabled],
			[t].[IsHypothetical],
			[t].[IsIgnoredInOptimization],
			[t].[AllowRowLocks],
			[t].[AllowPageLocks],

			[t].[IsFiltered],
			[t].[FilterDefinition],

			[t].[CompressionDelayMinutes],

			[t].[SuppressDupKeyMessages],
			[t].[IsAutoCreated],
			[t].[OptimizeForSequentialKey],

			[t].[RowLockPercent],
			[t].[RowLockWaitAverageMs],

			[t].[LeafInsertCount],
			[t].[LeafUpdateCount],
			[t].[LeafDeleteCount],
			[t].[LeafGhostCount],
			[t].[LeafAllocationCount],
			[t].[LeafPageMergeCount],

			[t].[NonleafInsertCount],
			[t].[NonleafUpdateCount],
			[t].[NonleafDeleteCount],
			[t].[NonleafAllocationCount],
			[t].[NonleafPageMergeCount],

			[t].[PageCompressionAttemptCount],
			[t].[PageCompressionSuccessCount],

			[t].[PageIoLatchWaitCount],
			[t].[PageIoLatchWaitMs],
			[t].[PageLatchWaitCount],
			[t].[PageLatchWaitMs],

			[t].[RowLockCount],
			[t].[RowLockWaitCount],
			[t].[RowLockWaitMs],

			[t].[PageLockCount],
			[t].[PageLockWaitCount],
			[t].[PageLockWaitMs],

			[t].[RowOverflowFetchBytes],
			[t].[RowOverflowFetchPages],

			[t].[TreePageIoLatchWaitCount],
			[t].[TreePageIoLatchWaitMs],
			[t].[TreePageLatchWaitCount],
			[t].[TreePageLatchWaitMs],

			[t].[LobFetchBytes],
			[t].[LobFetchPages],
			[t].[LobOrphanCreateCount],
			[t].[LobOrphanInsertCount],

			[t].[IndexLockPromotionAttemptCount],
			[t].[IndexLockPromotionCount],

			[t].[ColumnValuePullInRowCount],
			[t].[ColumnValuePushOffRowCount],

			[t].[RangeScanCount],
			[t].[SingletonLookupCount],
			[t].[ForwardedFetchCount]
		FROM
			#ReturnTable_DatabaseIndexesOperational	[t];

		DROP TABLE IF EXISTS #ReturnTable_DatabaseIndexesOperational;

	-----------------------------------------------------------------------------------------------
	IF (@TxnCount = 0) COMMIT TRANSACTION @TxnActive ELSE SAVE TRANSACTION @TxnActive;
	END TRY
	BEGIN CATCH

		SET @ErrorCode = @@ERROR;

		IF (XACT_STATE() = -1) ROLLBACK	TRANSACTION	@TxnActive;
		IF (XACT_STATE() =  1) COMMIT	TRANSACTION	@TxnActive;

		THROW;

		RETURN @ErrorCode;

	END CATCH;

	RETURN @ErrorCode;

END;
GO
PRINT N'Creating Procedure [smash].[Select_SystemDatabaseFiles]...';


GO
CREATE PROCEDURE [smash].[Select_SystemDatabaseFiles]
AS
BEGIN

	SET NOCOUNT ON;
	SET LOCK_TIMEOUT 100;
	SET DEADLOCK_PRIORITY HIGH;

	DECLARE @TxnCount		INT				= @@TRANCOUNT;
	DECLARE @TxnActive		VARCHAR(32)		= REPLACE(CONVERT(VARCHAR(36), NEWID(), 0), '-', '');
	DECLARE @ErrorCode		INT				= 0;

	IF (@TxnCount = 0) BEGIN TRANSACTION @TxnActive ELSE SAVE TRANSACTION @TxnActive;
	BEGIN TRY
	-----------------------------------------------------------------------------------------------

		DROP TABLE IF EXISTS #ReturnTable_FileSpaceUsage;

		CREATE TABLE #ReturnTable_FileSpaceUsage
		(
			[ReturnTableId]					INT					NOT	NULL	IDENTITY(1, 1) NOT FOR REPLICATION,

			[instance_id]					INT					NOT	NULL,
			[database_id]					SMALLINT			NOT	NULL,
			[file_id]						SMALLINT			NOT	NULL,
			[filegroup_id]					SMALLINT			NOT	NULL,

			[total_page_count]						BIGINT		NOT	NULL,
			[allocated_extent_page_count]			BIGINT		NOT	NULL,
			[unallocated_extent_page_count]			BIGINT		NOT	NULL,
			[version_store_reserved_page_count]		BIGINT			NULL,
			[user_object_reserved_page_count]		BIGINT			NULL,
			[internal_object_reserved_page_count]	BIGINT			NULL,
			[mixed_extent_page_count]				BIGINT		NOT	NULL,
			[modified_extent_page_count]			BIGINT		NOT	NULL,

			PRIMARY KEY CLUSTERED([ReturnTableId]	ASC)
		);

		DECLARE	@SqlBase		NVARCHAR(MAX)	= N'
		INSERT INTO #ReturnTable_FileSpaceUsage
		(
			[instance_id],
			[database_id],
			[file_id],
			[filegroup_id],

			[total_page_count],
			[allocated_extent_page_count],
			[unallocated_extent_page_count],
			[version_store_reserved_page_count],
			[user_object_reserved_page_count],
			[internal_object_reserved_page_count],
			[mixed_extent_page_count],
			[modified_extent_page_count]
		)
		SELECT
				[instance_id]		= CHECKSUM(@@SERVERNAME),
			[t].[database_id],
			[t].[file_id],
			[t].[filegroup_id],

			[t].[total_page_count],
			[t].[allocated_extent_page_count],
			[t].[unallocated_extent_page_count],
			[t].[version_store_reserved_page_count],
			[t].[user_object_reserved_page_count],
			[t].[internal_object_reserved_page_count],
			[t].[mixed_extent_page_count],
			[t].[modified_extent_page_count]
		FROM
			[$(DatabaseName)].sys.dm_db_file_space_usage	[t];';

		DECLARE @DbName			NVARCHAR(128)	= N'';
		DECLARE @SqlCommand		NVARCHAR(MAX);

		WHILE (@DbName IS NOT NULL)
		BEGIN

			SELECT
				@DbName = MIN([d].[name])
			FROM
				sys.databases	[d]
			WHERE
				([d].[name]	> @DbName);

			SET @SqlCommand = REPLACE(@SqlBase, N'$(DatabaseName)', @DbName);

			PRINT CONVERT(NCHAR(23), SYSDATETIME(), 121) + NCHAR(9) + N'Querying database [' + @DbName + N']';

			EXECUTE sp_executesql @SqlCommand;

		END;

		SELECT
				[instance_id]			= CHECKSUM(@@SERVERNAME),
			[f].[database_id],
			[f].[file_id],
			[u].[filegroup_id],

				[Instance]				= @@SERVERNAME,
				[InstanceHost]			= CAST(SERVERPROPERTY('MachineName') AS VARCHAR),
				[InstanceName]			= @@SERVICENAME,

				[DatabaseType]			= [smash].[SystemDatabaseType]([f].[database_id]),
				[DatabaseName]			= DB_NAME([f].[database_id]),
				[FileType]				= CASE [f].[type]
											WHEN	0	THEN 'Rows'
											WHEN	1	THEN 'Log'
											END,

				[FileName]				= [f].[name],
				[FileNamePhysical]		= [f].[physical_name],

				[FileState]				= CASE [f].[state]
											WHEN	0	THEN 'Online'
											WHEN	1	THEN 'Restoring'
											WHEN	2	THEN 'Recovering'
											WHEN	3	THEN 'Recovery Pending'
											WHEN	4	THEN 'Suspect'
											WHEN	5	THEN 'Internal'
											WHEN	6	THEN 'Offline'
											WHEN	7	THEN 'Defunct'
											WHEN	8	THEN 'Online'
											END,

				[FileSizePages]			= [f].[size],
				[FileSizeKb]			= CONVERT(FLOAT, [f].[size]) * 8.0,
				[FileSizeMb]			= CONVERT(FLOAT, [f].[size]) * 8.0 / 1000.0,
				[FileSizeGb]			= CONVERT(FLOAT, [f].[size]) * 8.0 / 1000000.0,

				[FileSizeMax]			= [f].[max_size],

				[FileSizeGrowthKb]		= IIF(([f].[is_percent_growth] = 0), [f].[growth],			NULL),
				[FileSizeGrowthMb]		= IIF(([f].[is_percent_growth] = 0), [f].[growth] / 1000.0, NULL),
				[FileSizeGrowthPcnt]	= IIF(([f].[is_percent_growth] = 1), [f].[growth] / 100.0,	NULL),

				[FileSpaceTotalPages]					= [u].[total_page_count],
				[FileSpaceAllocatedPages]				= [u].[allocated_extent_page_count],
				[FileSpaceUnallocatedPages]				= [u].[unallocated_extent_page_count],
				[FileSpaceReservedVersionPages]			= [u].[version_store_reserved_page_count],
				[FileSpaceReservedUserObjectPages]		= [u].[user_object_reserved_page_count],
				[FileSpaceReservedInternalObjectPages]	= [u].[internal_object_reserved_page_count],

				[FileSpaceExtentMixedPages]				= [u].[mixed_extent_page_count],
				[FileSpaceExtentModifiedPages]			= [u].[modified_extent_page_count],

				[FileSpaceTotalMb]			=  CONVERT(FLOAT, [u].[total_page_count])				* 8.0 / 1000.0,
				[FileSpaceAllocatedMb]		=  CONVERT(FLOAT, [u].[allocated_extent_page_count])	* 8.0 / 1000.0,
				[FileSpaceUnallocatedMb]	=  CONVERT(FLOAT, [u].[unallocated_extent_page_count])	* 8.0 / 1000.0,

				[FileSpaceTotalGb]			=  CONVERT(FLOAT, [u].[total_page_count])				* 8.0 / 1000000.0,
				[FileSpaceAllocatedGb]		=  CONVERT(FLOAT, [u].[allocated_extent_page_count])	* 8.0 / 1000000.0,
				[FileSpaceUnallocatedGb]	=  CONVERT(FLOAT, [u].[unallocated_extent_page_count])	* 8.0 / 1000000.0,

				[VolumeMountPoint]		= [v].[volume_mount_point],
				[VolumeNameLogical]		= [v].[logical_volume_name],
				[VolumeFileType]		= [v].[file_system_type],

				[VolumeSizeTotalMb]		= CONVERT(FLOAT, [v].[total_bytes])							/ 1000000.0,
				[VolumeSizeAvailableMb]	= CONVERT(FLOAT, [v].[available_bytes])						/ 1000000.0,
				[VolumeSizeUsedMb]		= CONVERT(FLOAT, [v].[total_bytes] - [v].[available_bytes]) / 1000000.0,

				[VolumeSizeTotalGb]		= CONVERT(FLOAT, [v].[total_bytes])							/ 1000000000.0,
				[VolumeSizeAvailableGb]	= CONVERT(FLOAT, [v].[available_bytes])						/ 1000000000.0,
				[VolumeSizeUsedGb]		= CONVERT(FLOAT, [v].[total_bytes] - [v].[available_bytes]) / 1000000000.0,

				[VolumeAvailablePcnt]	=		CONVERT(FLOAT, [v].[available_bytes]) / CONVERT(FLOAT, [v].[total_bytes]),
				[VolumeUsedPcnt]		= 1.0 - CONVERT(FLOAT, [v].[available_bytes]) / CONVERT(FLOAT, [v].[total_bytes])
		FROM
			sys.master_files				[f]
		LEFT OUTER JOIN
			#ReturnTable_FileSpaceUsage		[u]
				ON	([f].[database_id]	=	[u].[database_id])
				AND	([f].[file_id]		=	[u].[file_id])
		CROSS APPLY
			sys.dm_os_volume_stats([f].[database_id], [f].[file_id])	[v];

		DROP TABLE IF EXISTS #ReturnTable_FileSpaceUsage;

	-----------------------------------------------------------------------------------------------
	IF (@TxnCount = 0) COMMIT TRANSACTION @TxnActive ELSE SAVE TRANSACTION @TxnActive;
	END TRY
	BEGIN CATCH

		SET @ErrorCode = @@ERROR;

		IF (XACT_STATE() = -1) ROLLBACK	TRANSACTION	@TxnActive;
		IF (XACT_STATE() =  1) COMMIT	TRANSACTION	@TxnActive;

		THROW;

		RETURN @ErrorCode;

	END CATCH;

	RETURN @ErrorCode;

END;
GO
PRINT N'Creating Procedure [smash].[Select_DatabaseIndexesAllocation]...';


GO
CREATE PROCEDURE [smash].[Select_DatabaseIndexesAllocation]
AS
BEGIN

	SET NOCOUNT ON;
	SET LOCK_TIMEOUT 100;
	SET DEADLOCK_PRIORITY HIGH;

	DECLARE @TxnCount		INT				= @@TRANCOUNT;
	DECLARE @TxnActive		VARCHAR(32)		= REPLACE(CONVERT(VARCHAR(36), NEWID(), 0), '-', '');
	DECLARE @ErrorCode		INT				= 0;

	IF (@TxnCount = 0) BEGIN TRANSACTION @TxnActive ELSE SAVE TRANSACTION @TxnActive;
	BEGIN TRY
	-----------------------------------------------------------------------------------------------

		DROP TABLE IF EXISTS #ReturnTable_DatabaseIndexesAllocation;

		CREATE TABLE #ReturnTable_DatabaseIndexesAllocation
		(
			[ReturnTableId]					INT					NOT	NULL	IDENTITY(1, 1) NOT FOR REPLICATION,

			[instance_id]					INT					NOT	NULL,
			[database_id]					SMALLINT			NOT	NULL,
			[schema_id]						INT					NOT	NULL,
			[object_id]						INT					NOT	NULL,
			[index_id]						INT					NOT	NULL,

			[partition_id]					BIGINT				NOT	NULL,
			[partition_number]				INT					NOT	NULL,
			[hobt_id]						BIGINT				NOT	NULL,
			[allocation_unit_id]			BIGINT				NOT	NULL,
			[container_id]					BIGINT				NOT	NULL,

			[Instance]						NVARCHAR(128)		NOT	NULL,
			[InstanceHost]					NVARCHAR(128)		NOT	NULL,
			[InstanceName]					NVARCHAR(128)		NOT	NULL,

			[DatabaseType]					VARCHAR(8)			NOT	NULL,
			[ObjectGroup]					VARCHAR(40)				NULL,
			[ObjectType]					VARCHAR(40)				NULL,

			[DatabaseName]					NVARCHAR(128)		NOT	NULL,
			[SchemaName]					NVARCHAR(128)		NOT	NULL,
			[ObjectName]					NVARCHAR(128)		NOT	NULL,
			[IndexName]						NVARCHAR(128)		NOT	NULL,

			[IndexType]						VARCHAR(16)			NOT	NULL,
			[IndexTypeClustering]			VARCHAR(16)			NOT	NULL,

			[IsPrimaryKey]					VARCHAR(3)			NOT	NULL,
			[IsUnique]						VARCHAR(3)			NOT	NULL,
			[IsUniqueConstraint]			VARCHAR(3)			NOT	NULL,
			[IsSingleColumn]				VARCHAR(3)			NOT	NULL,

			[ColumnsKey]					NVARCHAR(MAX)			NULL,
			[ColumnsKeyAll]					NVARCHAR(MAX)			NULL,
			[ColumnsIncluded]				NVARCHAR(MAX)			NULL,
			[ColumnsAll]					NVARCHAR(MAX)			NULL,

			[FileGroup]						NVARCHAR(128)		NOT	NULL,
			[FileGroupDescription]			VARCHAR(24)			NOT	NULL,
			[FileGroupIsDefault]			VARCHAR(3)			NOT	NULL,
			[FileGroupIsSystem]				VARCHAR(3)			NOT	NULL,

			[IgnoreDuplicateKey]			VARCHAR(3)			NOT	NULL,

			[FillFactor]					TINYINT				NOT	NULL,

			[IsPadded]						VARCHAR(3)			NOT	NULL,
			[IsEnabled]						VARCHAR(3)			NOT	NULL,
			[IsDisabled]					VARCHAR(3)			NOT	NULL,
			[IsHypothetical]				VARCHAR(3)			NOT	NULL,
			[IsIgnoredInOptimization]		VARCHAR(3)			NOT	NULL,
			[AllowRowLocks]					VARCHAR(3)			NOT	NULL,
			[AllowPageLocks]				VARCHAR(3)			NOT	NULL,

			[IsFiltered]					VARCHAR(3)			NOT	NULL,
			[FilterDefinition]				NVARCHAR(MAX)			NULL,

			[CompressionDelayMinutes]		INT						NULL,

			[SuppressDupKeyMessages]		VARCHAR(3)			NOT	NULL,
			[IsAutoCreated]					VARCHAR(3)			NOT	NULL,
			[OptimizeForSequentialKey]		VARCHAR(3)				NULL,

			[IsRowCount]					VARCHAR(3)			NOT	NULL,
			[RowCount]						BIGINT				NOT	NULL,

			[DataCompression]				VARCHAR(24)			NOT	NULL,
			[AllocationType]				VARCHAR(24)			NOT	NULL,

			[AllocationTotalPages]			BIGINT				NOT	NULL,
			[AllocationUsedPages]			BIGINT				NOT	NULL,
			[AllocationDataPages]			BIGINT				NOT	NULL,
			[AllocationFreePages]			BIGINT				NOT	NULL,

			[AllocationTotalMb]				FLOAT				NOT	NULL,
			[AllocationUsedMb]				FLOAT				NOT	NULL,
			[AllocationDataMb]				FLOAT				NOT	NULL,
			[AllocationFreeMb]				FLOAT				NOT	NULL,

			PRIMARY KEY CLUSTERED([ReturnTableId]	ASC)
		);

		DECLARE	@SqlBase		NVARCHAR(MAX)	= N'
		IF (OBJECT_ID(''[$(DatabaseName)].[smash].[DatabaseIndexesAllocation]'') IS NOT NULL)
		BEGIN

			INSERT INTO #ReturnTable_DatabaseIndexesAllocation	WITH(TABLOCK)
			(
				[instance_id],
				[database_id],
				[schema_id],
				[object_id],
				[index_id],

				[partition_id],
				[partition_number],
				[hobt_id],
				[allocation_unit_id],
				[container_id],

				[Instance],
				[InstanceHost],
				[InstanceName],

				[DatabaseType],
				[ObjectGroup],
				[ObjectType],

				[DatabaseName],
				[SchemaName],
				[ObjectName],
				[IndexName],

				[IndexType],
				[IndexTypeClustering],

				[IsPrimaryKey],
				[IsUnique],
				[IsUniqueConstraint],
				[IsSingleColumn],

				[ColumnsKey],
				[ColumnsKeyAll],
				[ColumnsIncluded],
				[ColumnsAll],

				[FileGroup],
				[FileGroupDescription],
				[FileGroupIsDefault],
				[FileGroupIsSystem],

				[IgnoreDuplicateKey],

				[FillFactor],

				[IsPadded],
				[IsEnabled],
				[IsDisabled],
				[IsHypothetical],
				[IsIgnoredInOptimization],
				[AllowRowLocks],
				[AllowPageLocks],

				[IsFiltered],
				[FilterDefinition],

				[CompressionDelayMinutes],

				[SuppressDupKeyMessages],
				[IsAutoCreated],
				[OptimizeForSequentialKey],

				[IsRowCount],
				[RowCount],

				[DataCompression],
				[AllocationType],

				[AllocationTotalPages],
				[AllocationUsedPages],
				[AllocationDataPages],
				[AllocationFreePages],

				[AllocationTotalMb],
				[AllocationUsedMb],
				[AllocationDataMb],
				[AllocationFreeMb]
			)
			SELECT
				[t].[instance_id],
				[t].[database_id],
				[t].[schema_id],
				[t].[object_id],
				[t].[index_id],

				[t].[partition_id],
				[t].[partition_number],
				[t].[hobt_id],
				[t].[allocation_unit_id],
				[t].[container_id],

				[t].[Instance],
				[t].[InstanceHost],
				[t].[InstanceName],

				[t].[DatabaseType],
				[t].[ObjectGroup],
				[t].[ObjectType],

				[t].[DatabaseName],
				[t].[SchemaName],
				[t].[ObjectName],
				[t].[IndexName],

				[t].[IndexType],
				[t].[IndexTypeClustering],

				[t].[IsPrimaryKey],
				[t].[IsUnique],
				[t].[IsUniqueConstraint],
				[t].[IsSingleColumn],

				[t].[ColumnsKey],
				[t].[ColumnsKeyAll],
				[t].[ColumnsIncluded],
				[t].[ColumnsAll],

				[t].[FileGroup],
				[t].[FileGroupDescription],
				[t].[FileGroupIsDefault],
				[t].[FileGroupIsSystem],

				[t].[IgnoreDuplicateKey],

				[t].[FillFactor],

				[t].[IsPadded],
				[t].[IsEnabled],
				[t].[IsDisabled],
				[t].[IsHypothetical],
				[t].[IsIgnoredInOptimization],
				[t].[AllowRowLocks],
				[t].[AllowPageLocks],

				[t].[IsFiltered],
				[t].[FilterDefinition],

				[t].[CompressionDelayMinutes],

				[t].[SuppressDupKeyMessages],
				[t].[IsAutoCreated],
				[t].[OptimizeForSequentialKey],

				[t].[IsRowCount],
				[t].[RowCount],

				[t].[DataCompression],
				[t].[AllocationType],

				[t].[AllocationTotalPages],
				[t].[AllocationUsedPages],
				[t].[AllocationDataPages],
				[t].[AllocationFreePages],

				[t].[AllocationTotalMb],
				[t].[AllocationUsedMb],
				[t].[AllocationDataMb],
				[t].[AllocationFreeMb]
			FROM
				[$(DatabaseName)].[smash].[DatabaseIndexesAllocation]	[t];

		END;';

		DECLARE @DbName			NVARCHAR(128)	= N'';
		DECLARE @SqlCommand		NVARCHAR(MAX);

		WHILE (@DbName IS NOT NULL)
		BEGIN

			SELECT
				@DbName = MIN([d].[name])
			FROM
				sys.databases	[d]
			WHERE
					([d].[name]	> @DbName)
				--AND	([d].[database_id] NOT IN (SELECT [x].[database_id] FROM [smash].[ExcludeDatabases] [x]));

			SET @SqlCommand = REPLACE(@SqlBase, N'$(DatabaseName)', @DbName);

			PRINT CONVERT(NCHAR(23), SYSDATETIME(), 121) + NCHAR(9) + N'Querying database [' + @DbName + N']';

			EXECUTE sp_executesql @SqlCommand;

		END;

		SELECT
			[t].[instance_id],
			[t].[database_id],
			[t].[schema_id],
			[t].[object_id],
			[t].[index_id],

			[t].[partition_id],
			[t].[partition_number],
			[t].[hobt_id],
			[t].[allocation_unit_id],
			[t].[container_id],

			[t].[Instance],
			[t].[InstanceHost],
			[t].[InstanceName],

			[t].[DatabaseType],
			[t].[ObjectGroup],
			[t].[ObjectType],

			[t].[DatabaseName],
			[t].[SchemaName],
			[t].[ObjectName],
			[t].[IndexName],

			[t].[IndexType],
			[t].[IndexTypeClustering],

			[t].[IsPrimaryKey],
			[t].[IsUnique],
			[t].[IsUniqueConstraint],
			[t].[IsSingleColumn],

			[t].[ColumnsKey],
			[t].[ColumnsKeyAll],
			[t].[ColumnsIncluded],
			[t].[ColumnsAll],

			[t].[FileGroup],
			[t].[FileGroupDescription],
			[t].[FileGroupIsDefault],
			[t].[FileGroupIsSystem],

			[t].[IgnoreDuplicateKey],

			[t].[FillFactor],

			[t].[IsPadded],
			[t].[IsEnabled],
			[t].[IsDisabled],
			[t].[IsHypothetical],
			[t].[IsIgnoredInOptimization],
			[t].[AllowRowLocks],
			[t].[AllowPageLocks],

			[t].[IsFiltered],
			[t].[FilterDefinition],

			[t].[CompressionDelayMinutes],

			[t].[SuppressDupKeyMessages],
			[t].[IsAutoCreated],
			[t].[OptimizeForSequentialKey],

			[t].[IsRowCount],
			[t].[RowCount],

			[t].[DataCompression],
			[t].[AllocationType],

			[t].[AllocationTotalPages],
			[t].[AllocationUsedPages],
			[t].[AllocationDataPages],
			[t].[AllocationFreePages],

			[t].[AllocationTotalMb],
			[t].[AllocationUsedMb],
			[t].[AllocationDataMb],
			[t].[AllocationFreeMb]
		FROM
			#ReturnTable_DatabaseIndexesAllocation	[t];

		DROP TABLE IF EXISTS #ReturnTable_DatabaseIndexesAllocation;

	-----------------------------------------------------------------------------------------------
	IF (@TxnCount = 0) COMMIT TRANSACTION @TxnActive ELSE SAVE TRANSACTION @TxnActive;
	END TRY
	BEGIN CATCH

		SET @ErrorCode = @@ERROR;

		IF (XACT_STATE() = -1) ROLLBACK	TRANSACTION	@TxnActive;
		IF (XACT_STATE() =  1) COMMIT	TRANSACTION	@TxnActive;

		THROW;

		RETURN @ErrorCode;

	END CATCH;

	RETURN @ErrorCode;

END;
GO
PRINT N'Creating Procedure [smash].[Select_DatabaseIndexes]...';


GO
CREATE PROCEDURE [smash].[Select_DatabaseIndexes]
AS
BEGIN

	SET NOCOUNT ON;
	SET LOCK_TIMEOUT 100;
	SET DEADLOCK_PRIORITY HIGH;

	DECLARE @TxnCount		INT				= @@TRANCOUNT;
	DECLARE @TxnActive		VARCHAR(32)		= REPLACE(CONVERT(VARCHAR(36), NEWID(), 0), '-', '');
	DECLARE @ErrorCode		INT				= 0;

	IF (@TxnCount = 0) BEGIN TRANSACTION @TxnActive ELSE SAVE TRANSACTION @TxnActive;
	BEGIN TRY
	-----------------------------------------------------------------------------------------------

		DROP TABLE IF EXISTS #ReturnTable_DatabaseIndexes;

		CREATE TABLE #ReturnTable_DatabaseIndexes
		(
			[ReturnTableId]					INT					NOT	NULL	IDENTITY(1, 1) NOT FOR REPLICATION,

			[instance_id]					INT					NOT	NULL,
			[database_id]					SMALLINT			NOT	NULL,
			[schema_id]						INT					NOT	NULL,
			[object_id]						INT					NOT	NULL,
			[index_id]						INT					NOT	NULL,

			[Instance]						NVARCHAR(128)		NOT	NULL,
			[InstanceHost]					NVARCHAR(128)		NOT	NULL,
			[InstanceName]					NVARCHAR(128)		NOT	NULL,

			[DatabaseType]					VARCHAR(8)			NOT	NULL,
			[ObjectGroup]					VARCHAR(40)				NULL,
			[ObjectType]					VARCHAR(40)				NULL,

			[DatabaseName]					NVARCHAR(128)		NOT	NULL,
			[SchemaName]					NVARCHAR(128)		NOT	NULL,
			[ObjectName]					NVARCHAR(128)		NOT	NULL,
			[IndexName]						NVARCHAR(128)		NOT	NULL,

			[IndexType]						VARCHAR(16)			NOT	NULL,
			[IndexTypeClustering]			VARCHAR(16)			NOT	NULL,

			[IsPrimaryKey]					VARCHAR(3)			NOT	NULL,
			[IsUnique]						VARCHAR(3)			NOT	NULL,
			[IsUniqueConstraint]			VARCHAR(3)			NOT	NULL,
			[IsSingleColumn]				VARCHAR(3)			NOT	NULL,

			[ColumnsKey]					NVARCHAR(MAX)			NULL,
			[ColumnsKeyAll]					NVARCHAR(MAX)			NULL,
			[ColumnsIncluded]				NVARCHAR(MAX)			NULL,
			[ColumnsAll]					NVARCHAR(MAX)			NULL,

			[FileGroup]						NVARCHAR(128)		NOT	NULL,
			[FileGroupDescription]			VARCHAR(24)			NOT	NULL,
			[FileGroupIsDefault]			VARCHAR(3)			NOT	NULL,
			[FileGroupIsSystem]				VARCHAR(3)			NOT	NULL,

			[IgnoreDuplicateKey]			VARCHAR(3)			NOT	NULL,

			[FillFactor]					TINYINT				NOT	NULL,

			[IsPadded]						VARCHAR(3)			NOT	NULL,
			[IsEnabled]						VARCHAR(3)			NOT	NULL,
			[IsDisabled]					VARCHAR(3)			NOT	NULL,
			[IsHypothetical]				VARCHAR(3)			NOT	NULL,
			[IsIgnoredInOptimization]		VARCHAR(3)			NOT	NULL,
			[AllowRowLocks]					VARCHAR(3)			NOT	NULL,
			[AllowPageLocks]				VARCHAR(3)			NOT	NULL,

			[IsFiltered]					VARCHAR(3)			NOT	NULL,
			[FilterDefinition]				NVARCHAR(MAX)			NULL,

			[CompressionDelayMinutes]		INT						NULL,

			[SuppressDupKeyMessages]		VARCHAR(3)			NOT	NULL,
			[IsAutoCreated]					VARCHAR(3)			NOT	NULL,
			[OptimizeForSequentialKey]		VARCHAR(3)				NULL,

			[IsIndexDropCandidate]			VARCHAR(3)				NULL,
			[IsIndexReadByUser]				VARCHAR(3)				NULL,
			[IsIndexReadBySystem]			VARCHAR(3)				NULL,

			[UserSeeks]						BIGINT					NULL,
			[UserScans]						BIGINT					NULL,
			[UserLookups]					BIGINT					NULL,
			[UserUpdates]					BIGINT					NULL,

			[LastUserSeek]					DATETIME				NULL,
			[LastUserScan]					DATETIME				NULL,
			[LastUserLookup]				DATETIME				NULL,
			[LastUserUpdate]				DATETIME				NULL,

			[LastUserRead]					DATETIME				NULL,

			[SystemSeeks]					BIGINT					NULL,
			[SystemScans]					BIGINT					NULL,
			[SystemLookups]					BIGINT					NULL,
			[SystemUpdates]					BIGINT					NULL,

			[LastSystemSeek]				DATETIME				NULL,
			[LastSystemScan]				DATETIME				NULL,
			[LastSystemLookup]				DATETIME				NULL,
			[LastSystemUpdate]				DATETIME				NULL,

			[LastSystemRead]				DATETIME				NULL,

			PRIMARY KEY CLUSTERED([ReturnTableId]	ASC)
		);

		DECLARE	@SqlBase		NVARCHAR(MAX)	= N'
		IF (OBJECT_ID(''[$(DatabaseName)].[smash].[DatabaseIndexes]'') IS NOT NULL)
		BEGIN

			INSERT INTO #ReturnTable_DatabaseIndexes	WITH(TABLOCK)
			(
				[instance_id],
				[database_id],
				[schema_id],
				[object_id],
				[index_id],

				[Instance],
				[InstanceHost],
				[InstanceName],

				[DatabaseType],
				[ObjectGroup],
				[ObjectType],

				[DatabaseName],
				[SchemaName],
				[ObjectName],
				[IndexName],

				[IndexType],
				[IndexTypeClustering],

				[IsPrimaryKey],
				[IsUnique],
				[IsUniqueConstraint],
				[IsSingleColumn],

				[ColumnsKey],
				[ColumnsKeyAll],
				[ColumnsIncluded],
				[ColumnsAll],

				[FileGroup],
				[FileGroupDescription],
				[FileGroupIsDefault],
				[FileGroupIsSystem],

				[IgnoreDuplicateKey],

				[FillFactor],

				[IsPadded],
				[IsEnabled],
				[IsDisabled],
				[IsHypothetical],
				[IsIgnoredInOptimization],
				[AllowRowLocks],
				[AllowPageLocks],

				[IsFiltered],
				[FilterDefinition],

				[CompressionDelayMinutes],

				[SuppressDupKeyMessages],
				[IsAutoCreated],
				[OptimizeForSequentialKey],

				[IsIndexDropCandidate],
				[IsIndexReadByUser],
				[IsIndexReadBySystem],

				[UserSeeks],
				[UserScans],
				[UserLookups],
				[UserUpdates],

				[LastUserSeek],
				[LastUserScan],
				[LastUserLookup],
				[LastUserUpdate],

				[LastUserRead],

				[SystemSeeks],
				[SystemScans],
				[SystemLookups],
				[SystemUpdates],

				[LastSystemSeek],
				[LastSystemScan],
				[LastSystemLookup],
				[LastSystemUpdate],

				[LastSystemRead]
			)
			SELECT
				[t].[instance_id],
				[t].[database_id],
				[t].[schema_id],
				[t].[object_id],
				[t].[index_id],

				[t].[Instance],
				[t].[InstanceHost],
				[t].[InstanceName],

				[t].[DatabaseType],
				[t].[ObjectGroup],
				[t].[ObjectType],

				[t].[DatabaseName],
				[t].[SchemaName],
				[t].[ObjectName],
				[t].[IndexName],

				[t].[IndexType],
				[t].[IndexTypeClustering],

				[t].[IsPrimaryKey],
				[t].[IsUnique],
				[t].[IsUniqueConstraint],
				[t].[IsSingleColumn],

				[t].[ColumnsKey],
				[t].[ColumnsKeyAll],
				[t].[ColumnsIncluded],
				[t].[ColumnsAll],

				[t].[FileGroup],
				[t].[FileGroupDescription],
				[t].[FileGroupIsDefault],
				[t].[FileGroupIsSystem],

				[t].[IgnoreDuplicateKey],

				[t].[FillFactor],

				[t].[IsPadded],
				[t].[IsEnabled],
				[t].[IsDisabled],
				[t].[IsHypothetical],
				[t].[IsIgnoredInOptimization],
				[t].[AllowRowLocks],
				[t].[AllowPageLocks],

				[t].[IsFiltered],
				[t].[FilterDefinition],

				[t].[CompressionDelayMinutes],

				[t].[SuppressDupKeyMessages],
				[t].[IsAutoCreated],
				[t].[OptimizeForSequentialKey],

				[t].[IsIndexDropCandidate],
				[t].[IsIndexReadByUser],
				[t].[IsIndexReadBySystem],

				[t].[UserSeeks],
				[t].[UserScans],
				[t].[UserLookups],
				[t].[UserUpdates],

				[t].[LastUserSeek],
				[t].[LastUserScan],
				[t].[LastUserLookup],
				[t].[LastUserUpdate],

				[t].[LastUserRead],

				[t].[SystemSeeks],
				[t].[SystemScans],
				[t].[SystemLookups],
				[t].[SystemUpdates],

				[t].[LastSystemSeek],
				[t].[LastSystemScan],
				[t].[LastSystemLookup],
				[t].[LastSystemUpdate],

				[t].[LastSystemRead]
			FROM
				[$(DatabaseName)].[smash].[DatabaseIndexes]	[t];

		END;';

		DECLARE @DbName			NVARCHAR(128)	= N'';
		DECLARE @SqlCommand		NVARCHAR(MAX);

		WHILE (@DbName IS NOT NULL)
		BEGIN

			SELECT
				@DbName = MIN([d].[name])
			FROM
				sys.databases	[d]
			WHERE
					([d].[name]	> @DbName)
				--AND	([d].[database_id] NOT IN (SELECT [x].[database_id] FROM [smash].[ExcludeDatabases] [x]));

			SET @SqlCommand = REPLACE(@SqlBase, N'$(DatabaseName)', @DbName);

			PRINT CONVERT(NCHAR(23), SYSDATETIME(), 121) + NCHAR(9) + N'Querying database [' + @DbName + N']';

			EXECUTE sp_executesql @SqlCommand;

		END;

		SELECT
			[t].[instance_id],
			[t].[database_id],
			[t].[schema_id],
			[t].[object_id],
			[t].[index_id],

			[t].[Instance],
			[t].[InstanceHost],
			[t].[InstanceName],

			[t].[DatabaseType],
			[t].[ObjectGroup],
			[t].[ObjectType],

			[t].[DatabaseName],
			[t].[SchemaName],
			[t].[ObjectName],
			[t].[IndexName],

			[t].[IndexType],
			[t].[IndexTypeClustering],

			[t].[IsPrimaryKey],
			[t].[IsUnique],
			[t].[IsUniqueConstraint],
			[t].[IsSingleColumn],

			[t].[ColumnsKey],
			[t].[ColumnsKeyAll],
			[t].[ColumnsIncluded],
			[t].[ColumnsAll],

			[t].[FileGroup],
			[t].[FileGroupDescription],
			[t].[FileGroupIsDefault],
			[t].[FileGroupIsSystem],

			[t].[IgnoreDuplicateKey],

			[t].[FillFactor],

			[t].[IsPadded],
			[t].[IsEnabled],
			[t].[IsDisabled],
			[t].[IsHypothetical],
			[t].[IsIgnoredInOptimization],
			[t].[AllowRowLocks],
			[t].[AllowPageLocks],

			[t].[IsFiltered],
			[t].[FilterDefinition],

			[t].[CompressionDelayMinutes],

			[t].[SuppressDupKeyMessages],
			[t].[IsAutoCreated],
			[t].[OptimizeForSequentialKey],

			[t].[IsIndexDropCandidate],
			[t].[IsIndexReadByUser],
			[t].[IsIndexReadBySystem],

			[t].[UserSeeks],
			[t].[UserScans],
			[t].[UserLookups],
			[t].[UserUpdates],

			[t].[LastUserSeek],
			[t].[LastUserScan],
			[t].[LastUserLookup],
			[t].[LastUserUpdate],

			[t].[LastUserRead],

			[t].[SystemSeeks],
			[t].[SystemScans],
			[t].[SystemLookups],
			[t].[SystemUpdates],

			[t].[LastSystemSeek],
			[t].[LastSystemScan],
			[t].[LastSystemLookup],
			[t].[LastSystemUpdate],

			[t].[LastSystemRead]
		FROM
			#ReturnTable_DatabaseIndexes	[t];

		DROP TABLE IF EXISTS #ReturnTable_DatabaseIndexes;

	-----------------------------------------------------------------------------------------------
	IF (@TxnCount = 0) COMMIT TRANSACTION @TxnActive ELSE SAVE TRANSACTION @TxnActive;
	END TRY
	BEGIN CATCH

		SET @ErrorCode = @@ERROR;

		IF (XACT_STATE() = -1) ROLLBACK	TRANSACTION	@TxnActive;
		IF (XACT_STATE() =  1) COMMIT	TRANSACTION	@TxnActive;

		THROW;

		RETURN @ErrorCode;

	END CATCH;

	RETURN @ErrorCode;

END;
GO
PRINT N'Creating Procedure [smash].[Select_DatabaseIndexesPhysical]...';


GO
CREATE PROCEDURE [smash].[Select_DatabaseIndexesPhysical]
AS
BEGIN

	SET NOCOUNT ON;
	SET LOCK_TIMEOUT 100;
	SET DEADLOCK_PRIORITY HIGH;

	DECLARE @TxnCount		INT				= @@TRANCOUNT;
	DECLARE @TxnActive		VARCHAR(32)		= REPLACE(CONVERT(VARCHAR(36), NEWID(), 0), '-', '');
	DECLARE @ErrorCode		INT				= 0;

	IF (@TxnCount = 0) BEGIN TRANSACTION @TxnActive ELSE SAVE TRANSACTION @TxnActive;
	BEGIN TRY
	-----------------------------------------------------------------------------------------------

		DROP TABLE IF EXISTS #ReturnTable_DatabaseIndexesPhysical;

		CREATE TABLE #ReturnTable_DatabaseIndexesPhysical
		(
			[ReturnTableId]					INT					NOT	NULL	IDENTITY(1, 1) NOT FOR REPLICATION,

			[instance_id]					INT					NOT	NULL,
			[database_id]					SMALLINT			NOT	NULL,
			[schema_id]						INT					NOT	NULL,
			[object_id]						INT					NOT	NULL,
			[index_id]						INT					NOT	NULL,

			[partition_id]					BIGINT				NOT	NULL,
			[partition_number]				INT					NOT	NULL,
			[hobt_id]						BIGINT				NOT	NULL,

			[Instance]						NVARCHAR(128)		NOT	NULL,
			[InstanceHost]					NVARCHAR(128)		NOT	NULL,
			[InstanceName]					NVARCHAR(128)		NOT	NULL,

			[DatabaseType]					VARCHAR(8)			NOT	NULL,
			[ObjectGroup]					VARCHAR(40)				NULL,
			[ObjectType]					VARCHAR(40)				NULL,

			[DatabaseName]					NVARCHAR(128)		NOT	NULL,
			[SchemaName]					NVARCHAR(128)		NOT	NULL,
			[ObjectName]					NVARCHAR(128)		NOT	NULL,
			[IndexName]						NVARCHAR(128)		NOT	NULL,

			[IndexType]						VARCHAR(16)			NOT	NULL,
			[IndexTypeClustering]			VARCHAR(16)			NOT	NULL,

			[IsPrimaryKey]					VARCHAR(3)			NOT	NULL,
			[IsUnique]						VARCHAR(3)			NOT	NULL,
			[IsUniqueConstraint]			VARCHAR(3)			NOT	NULL,
			[IsSingleColumn]				VARCHAR(3)			NOT	NULL,

			[ColumnsKey]					NVARCHAR(MAX)			NULL,
			[ColumnsKeyAll]					NVARCHAR(MAX)			NULL,
			[ColumnsIncluded]				NVARCHAR(MAX)			NULL,
			[ColumnsAll]					NVARCHAR(MAX)			NULL,

			[FileGroup]						NVARCHAR(128)		NOT	NULL,
			[FileGroupDescription]			VARCHAR(24)			NOT	NULL,
			[FileGroupIsDefault]			VARCHAR(3)			NOT	NULL,
			[FileGroupIsSystem]				VARCHAR(3)			NOT	NULL,

			[IgnoreDuplicateKey]			VARCHAR(3)			NOT	NULL,

			[FillFactor]					TINYINT				NOT	NULL,

			[IsPadded]						VARCHAR(3)			NOT	NULL,
			[IsEnabled]						VARCHAR(3)			NOT	NULL,
			[IsDisabled]					VARCHAR(3)			NOT	NULL,
			[IsHypothetical]				VARCHAR(3)			NOT	NULL,
			[IsIgnoredInOptimization]		VARCHAR(3)			NOT	NULL,
			[AllowRowLocks]					VARCHAR(3)			NOT	NULL,
			[AllowPageLocks]				VARCHAR(3)			NOT	NULL,

			[IsFiltered]					VARCHAR(3)			NOT	NULL,
			[FilterDefinition]				NVARCHAR(MAX)			NULL,

			[CompressionDelayMinutes]		INT						NULL,

			[SuppressDupKeyMessages]		VARCHAR(3)			NOT	NULL,
			[IsAutoCreated]					VARCHAR(3)			NOT	NULL,
			[OptimizeForSequentialKey]		VARCHAR(3)				NULL,

			[IndexTypePhysical]				VARCHAR(30)			NOT	NULL,
			[AllocationType]				VARCHAR(24)			NOT	NULL,

			[IndexDepth]					TINYINT				NOT	NULL,
			[IndexLevel]					TINYINT				NOT	NULL,

			[FragmentationPcnt]				FLOAT				NOT	NULL,

			[FragmentCount]					BIGINT					NULL,
			[FragmentSizePages]				FLOAT					NULL,
			[FragmentSizeMb]				FLOAT					NULL,

			[DataPages]						BIGINT				NOT	NULL,
			[DataMb]						FLOAT				NOT	NULL,
			[DataCompressedPages]			BIGINT					NULL,
			[DataCompressedMb]				FLOAT					NULL,

			[FragmentPageSpaceUsedPcnt]		FLOAT				NOT	NULL,

			[RecordCount]					BIGINT				NOT	NULL,
			[RecordCountGhost]				BIGINT				NOT	NULL,
			[RecordCountGhostVersion]		BIGINT				NOT	NULL,
			[RecordCountForwarded]			BIGINT					NULL,

			[RecordSizeMinByte]				INT					NOT	NULL,
			[RecordSizeMaxByte]				INT					NOT	NULL,
			[RecordSizeAvgByte]				FLOAT				NOT	NULL,

			[ColumnstoreDeleteBufferState]	VARCHAR(30)			NOT	NULL,

			[RecordCountVersion]			BIGINT				NOT	NULL,
			[RecordCountVersionInRow]		BIGINT				NOT	NULL,
			[RecordCountVersionDiff]		BIGINT				NOT	NULL,
			[RecordCountVersionInRowByte]	BIGINT				NOT	NULL,
			[RecordCountVersionOffRow]		BIGINT				NOT	NULL,
			[RecordCountVersionOffRowLong]	BIGINT				NOT	NULL,

			PRIMARY KEY CLUSTERED([ReturnTableId]	ASC)
		);

		DECLARE	@SqlBase		NVARCHAR(MAX)	= N'
		IF (OBJECT_ID(''[$(DatabaseName)].[smash].[DatabaseIndexesPhysical]'') IS NOT NULL)
		BEGIN

			INSERT INTO #ReturnTable_DatabaseIndexesPhysical	WITH(TABLOCK)
			(
				[instance_id],
				[database_id],
				[schema_id],
				[object_id],
				[index_id],

				[partition_id],
				[partition_number],
				[hobt_id],

				[Instance],
				[InstanceHost],
				[InstanceName],

				[DatabaseType],
				[ObjectGroup],
				[ObjectType],

				[DatabaseName],
				[SchemaName],
				[ObjectName],
				[IndexName],

				[IndexType],
				[IndexTypeClustering],

				[IsPrimaryKey],
				[IsUnique],
				[IsUniqueConstraint],
				[IsSingleColumn],

				[ColumnsKey],
				[ColumnsKeyAll],
				[ColumnsIncluded],
				[ColumnsAll],

				[FileGroup],
				[FileGroupDescription],
				[FileGroupIsDefault],
				[FileGroupIsSystem],

				[IgnoreDuplicateKey],

				[FillFactor],

				[IsPadded],
				[IsEnabled],
				[IsDisabled],
				[IsHypothetical],
				[IsIgnoredInOptimization],
				[AllowRowLocks],
				[AllowPageLocks],

				[IsFiltered],
				[FilterDefinition],

				[CompressionDelayMinutes],

				[SuppressDupKeyMessages],
				[IsAutoCreated],
				[OptimizeForSequentialKey],

				[IndexTypePhysical],
				[AllocationType],

				[IndexDepth],
				[IndexLevel],

				[FragmentationPcnt],

				[FragmentCount],
				[FragmentSizePages],
				[FragmentSizeMb],

				[DataPages],
				[DataMb],
				[DataCompressedPages],
				[DataCompressedMb],

				[FragmentPageSpaceUsedPcnt],

				[RecordCount],
				[RecordCountGhost],
				[RecordCountGhostVersion],
				[RecordCountForwarded],

				[RecordSizeMinByte],
				[RecordSizeMaxByte],
				[RecordSizeAvgByte],

				[ColumnstoreDeleteBufferState],

				[RecordCountVersion],
				[RecordCountVersionInRow],
				[RecordCountVersionDiff],
				[RecordCountVersionInRowByte],
				[RecordCountVersionOffRow],
				[RecordCountVersionOffRowLong]
			)
			SELECT
				[t].[instance_id],
				[t].[database_id],
				[t].[schema_id],
				[t].[object_id],
				[t].[index_id],

				[t].[partition_id],
				[t].[partition_number],
				[t].[hobt_id],

				[t].[Instance],
				[t].[InstanceHost],
				[t].[InstanceName],

				[t].[DatabaseType],
				[t].[ObjectGroup],
				[t].[ObjectType],

				[t].[DatabaseName],
				[t].[SchemaName],
				[t].[ObjectName],
				[t].[IndexName],

				[t].[IndexType],
				[t].[IndexTypeClustering],

				[t].[IsPrimaryKey],
				[t].[IsUnique],
				[t].[IsUniqueConstraint],
				[t].[IsSingleColumn],

				[t].[ColumnsKey],
				[t].[ColumnsKeyAll],
				[t].[ColumnsIncluded],
				[t].[ColumnsAll],

				[t].[FileGroup],
				[t].[FileGroupDescription],
				[t].[FileGroupIsDefault],
				[t].[FileGroupIsSystem],

				[t].[IgnoreDuplicateKey],

				[t].[FillFactor],

				[t].[IsPadded],
				[t].[IsEnabled],
				[t].[IsDisabled],
				[t].[IsHypothetical],
				[t].[IsIgnoredInOptimization],
				[t].[AllowRowLocks],
				[t].[AllowPageLocks],

				[t].[IsFiltered],
				[t].[FilterDefinition],

				[t].[CompressionDelayMinutes],

				[t].[SuppressDupKeyMessages],
				[t].[IsAutoCreated],
				[t].[OptimizeForSequentialKey],

				[t].[IndexTypePhysical],
				[t].[AllocationType],

				[t].[IndexDepth],
				[t].[IndexLevel],

				[t].[FragmentationPcnt],

				[t].[FragmentCount],
				[t].[FragmentSizePages],
				[t].[FragmentSizeMb],

				[t].[DataPages],
				[t].[DataMb],
				[t].[DataCompressedPages],
				[t].[DataCompressedMb],

				[t].[FragmentPageSpaceUsedPcnt],

				[t].[RecordCount],
				[t].[RecordCountGhost],
				[t].[RecordCountGhostVersion],
				[t].[RecordCountForwarded],

				[t].[RecordSizeMinByte],
				[t].[RecordSizeMaxByte],
				[t].[RecordSizeAvgByte],

				[t].[ColumnstoreDeleteBufferState],

				[t].[RecordCountVersion],
				[t].[RecordCountVersionInRow],
				[t].[RecordCountVersionDiff],
				[t].[RecordCountVersionInRowByte],
				[t].[RecordCountVersionOffRow],
				[t].[RecordCountVersionOffRowLong]
			FROM
				[$(DatabaseName)].[smash].[DatabaseIndexesPhysical]	[t];

		END;';

		DECLARE @DbName			NVARCHAR(128)	= N'';
		DECLARE @SqlCommand		NVARCHAR(MAX);

		WHILE (@DbName IS NOT NULL)
		BEGIN

			SELECT
				@DbName = MIN([d].[name])
			FROM
				sys.databases	[d]
			WHERE
					([d].[name]	> @DbName)
				--AND	([d].[database_id] NOT IN (SELECT [x].[database_id] FROM [smash].[ExcludeDatabases] [x]));

			SET @SqlCommand = REPLACE(@SqlBase, N'$(DatabaseName)', @DbName);

			PRINT CONVERT(NCHAR(23), SYSDATETIME(), 121) + NCHAR(9) + N'Querying database [' + @DbName + N']';

			EXECUTE sp_executesql @SqlCommand;

		END;

		SELECT
			[t].[instance_id],
			[t].[database_id],
			[t].[schema_id],
			[t].[object_id],
			[t].[index_id],

			[t].[partition_id],
			[t].[partition_number],
			[t].[hobt_id],

			[t].[Instance],
			[t].[InstanceHost],
			[t].[InstanceName],

			[t].[DatabaseType],
			[t].[ObjectGroup],
			[t].[ObjectType],

			[t].[DatabaseName],
			[t].[SchemaName],
			[t].[ObjectName],
			[t].[IndexName],

			[t].[IndexType],
			[t].[IndexTypeClustering],

			[t].[IsPrimaryKey],
			[t].[IsUnique],
			[t].[IsUniqueConstraint],
			[t].[IsSingleColumn],

			[t].[ColumnsKey],
			[t].[ColumnsKeyAll],
			[t].[ColumnsIncluded],
			[t].[ColumnsAll],

			[t].[FileGroup],
			[t].[FileGroupDescription],
			[t].[FileGroupIsDefault],
			[t].[FileGroupIsSystem],

			[t].[IgnoreDuplicateKey],

			[t].[FillFactor],

			[t].[IsPadded],
			[t].[IsEnabled],
			[t].[IsDisabled],
			[t].[IsHypothetical],
			[t].[IsIgnoredInOptimization],
			[t].[AllowRowLocks],
			[t].[AllowPageLocks],

			[t].[IsFiltered],
			[t].[FilterDefinition],

			[t].[CompressionDelayMinutes],

			[t].[SuppressDupKeyMessages],
			[t].[IsAutoCreated],
			[t].[OptimizeForSequentialKey],

			[t].[IndexTypePhysical],
			[t].[AllocationType],

			[t].[IndexDepth],
			[t].[IndexLevel],

			[t].[FragmentationPcnt],

			[t].[FragmentCount],
			[t].[FragmentSizePages],
			[t].[FragmentSizeMb],

			[t].[DataPages],
			[t].[DataMb],
			[t].[DataCompressedPages],
			[t].[DataCompressedMb],

			[t].[FragmentPageSpaceUsedPcnt],

			[t].[RecordCount],
			[t].[RecordCountGhost],
			[t].[RecordCountGhostVersion],
			[t].[RecordCountForwarded],

			[t].[RecordSizeMinByte],
			[t].[RecordSizeMaxByte],
			[t].[RecordSizeAvgByte],

			[t].[ColumnstoreDeleteBufferState],

			[t].[RecordCountVersion],
			[t].[RecordCountVersionInRow],
			[t].[RecordCountVersionDiff],
			[t].[RecordCountVersionInRowByte],
			[t].[RecordCountVersionOffRow],
			[t].[RecordCountVersionOffRowLong]
		FROM
			#ReturnTable_DatabaseIndexesPhysical	[t];

		DROP TABLE IF EXISTS #ReturnTable_DatabaseIndexesPhysical;

	-----------------------------------------------------------------------------------------------
	IF (@TxnCount = 0) COMMIT TRANSACTION @TxnActive ELSE SAVE TRANSACTION @TxnActive;
	END TRY
	BEGIN CATCH

		SET @ErrorCode = @@ERROR;

		IF (XACT_STATE() = -1) ROLLBACK	TRANSACTION	@TxnActive;
		IF (XACT_STATE() =  1) COMMIT	TRANSACTION	@TxnActive;

		THROW;

		RETURN @ErrorCode;

	END CATCH;

	RETURN @ErrorCode;

END;
GO
/*
Post-Deployment Script Template							
--------------------------------------------------------------------------------------
 This file contains SQL statements that will be appended to the build script.		
 Use SQLCMD syntax to include a file in the post-deployment script.			
 Example:      :r .\myfile.sql								
 Use SQLCMD syntax to reference a variable in the post-deployment script.		
 Example:      :setvar TableName MyTable							
               SELECT * FROM [$(TableName)]					
--------------------------------------------------------------------------------------
*/

MERGE [smash].[ExcludeDatabases] [t]
USING (
	SELECT
		[t].[database_id],
			[DatabaseName]	=	[t].[name]
	FROM
		sys.databases	[t]
	WHERE
		([t].[database_id] <= 4)
	UNION
	SELECT
		[t].[database_id],
			[DatabaseName]	=	[t].[name]
	FROM
		sys.databases	[t]
	WHERE
			([t].[name] LIKE '%.Smash.Dbs')
		OR	([t].[name] LIKE '%.Track.Dbs')
		OR	([t].[name] LIKE 'Rogge%')
	UNION
	SELECT
			[database_id]	= DB_ID([t].[DatabaseName]),
		[t].[DatabaseName]
	FROM (VALUES
		('DWConfiguration'),
		('DWDiagnostics'),
		('DWQueue'),
		('SSISDB'),
		('SSRS'),
		('SSRSTempDB')
		)[t]([DatabaseName])
) [s]
ON	([t].[database_id]	= [s].[database_id])
WHEN NOT MATCHED BY TARGET THEN
	INSERT ([database_id], [DatabaseName])
	VALUES ([database_id], [DatabaseName])
WHEN NOT MATCHED BY SOURCE THEN
	DELETE;
GO

GO
DECLARE @VarDecimalSupported AS BIT;

SELECT @VarDecimalSupported = 0;

IF ((ServerProperty(N'EngineEdition') = 3)
    AND (((@@microsoftversion / power(2, 24) = 9)
          AND (@@microsoftversion & 0xffff >= 3024))
         OR ((@@microsoftversion / power(2, 24) = 10)
             AND (@@microsoftversion & 0xffff >= 1600))))
    SELECT @VarDecimalSupported = 1;

IF (@VarDecimalSupported > 0)
    BEGIN
        EXECUTE sp_db_vardecimal_storage_format N'$(DatabaseName)', 'ON';
    END


GO
ALTER DATABASE [$(DatabaseName)]
    SET MULTI_USER 
    WITH ROLLBACK IMMEDIATE;


GO
PRINT N'Update complete.';


GO
