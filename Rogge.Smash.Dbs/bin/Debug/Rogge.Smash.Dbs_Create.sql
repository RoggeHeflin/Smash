/*
Deployment script for AdventureWorks2019

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "AdventureWorks2019"
:setvar DefaultFilePrefix "AdventureWorks2019"
:setvar DefaultDataPath ""
:setvar DefaultLogPath ""

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
USE [master];


GO

IF (DB_ID(N'$(DatabaseName)') IS NOT NULL) 
BEGIN
    ALTER DATABASE [$(DatabaseName)]
    SET SINGLE_USER WITH ROLLBACK IMMEDIATE;
    DROP DATABASE [$(DatabaseName)];
END

GO
PRINT N'Creating database $(DatabaseName)...'
GO
CREATE DATABASE [$(DatabaseName)] COLLATE SQL_Latin1_General_CP1_CI_AS
GO
USE [$(DatabaseName)];


GO
ALTER DATABASE [$(DatabaseName)]
    SET SINGLE_USER 
    WITH ROLLBACK IMMEDIATE
GO
PRINT N'Creating Schema [smash]...';


GO
CREATE SCHEMA [smash]
    AUTHORIZATION [dbo];


GO
PRINT N'Creating Function [smash].[SystemDatabaseType]...';


GO
CREATE FUNCTION [smash].[SystemDatabaseType]
(
	@DatabaseId		INT
)
RETURNS NVARCHAR(8)
WITH SCHEMABINDING, RETURNS NULL ON NULL INPUT, INLINE = ON
AS
BEGIN

	DECLARE	@DatabaseType	VARCHAR(8)	= N'User';

	SET	@DatabaseType =
	CASE
		WHEN (@DatabaseId <= 4)			THEN N'System'
		WHEN (db_name(@DatabaseId) IN (
				N'DWConfiguration',
				N'DWDiagnostics',
				N'DWQueue',
				N'SSISDB',
				N'SSRS',
				N'SSRSTempDB'
				)
			)							THEN N'Support'
		WHEN (db_name(@DatabaseId) LIKE N'AdventureWorks%')
										THEN N'Training'
	ELSE
		@DatabaseType
	END;

	RETURN @DatabaseType;

END;
GO
PRINT N'Creating Function [smash].[ObjectType]...';


GO
CREATE FUNCTION [smash].[ObjectType]
(
	@Type	VARCHAR(2)
)
RETURNS VARCHAR(40)
WITH SCHEMABINDING
AS
BEGIN

	DECLARE @Return	VARCHAR(40)

	SET @Return = CASE @Type
		WHEN 'AF'	THEN 'Function: Aggregate CLR'
		WHEN 'C'	THEN 'Constraint: Check'
		WHEN 'D'	THEN 'Constraint: Default'
		WHEN 'F'	THEN 'Constraint: Key: Foreign'

		WHEN 'FN'	THEN 'Function: SQL Scalar'
		WHEN 'FS'	THEN 'Function: CLR Assembly Scalar'
		WHEN 'FT'	THEN 'Function: CLR Assembly Table-valued'
		WHEN 'IF'	THEN 'Function: SQL Inline Table-valued'

		WHEN 'IT'	THEN 'Table: Internal'
		WHEN 'P'	THEN 'Stored Procedure: SQL'
		WHEN 'PC'	THEN 'Stored Procedure: CLR'

		WHEN 'PG'	THEN 'Plan Guide'
		WHEN 'PK'	THEN 'Constraint: Key: Primary'
		WHEN 'R'	THEN 'Rule (old-style, stand-alone)'
		WHEN 'RF'	THEN 'Replication-filter-procedure'
		WHEN 'S'	THEN 'Table: System Base'
		WHEN 'SN'	THEN 'Synonym'
		WHEN 'SO'	THEN 'Sequence Object'
		WHEN 'U'	THEN 'Table: User Defined'
		WHEN 'V'	THEN 'View'
		WHEN 'EC'	THEN 'Constraint: Edge'

		-- 'Applies to: SQL Server 2012 (11.x) and later.'
		WHEN 'SQ'	THEN 'Service Queue'
		WHEN 'TA'	THEN 'Trigger: Assembly (CLR) DML'
		WHEN 'TF'	THEN 'Function: SQL Table-valued'
		WHEN 'TR'	THEN 'Trigger: SQL DML'
		WHEN 'TT'	THEN 'Table Type'
		WHEN 'UQ'	THEN 'Constraint: Unique'
		WHEN 'X'	THEN 'Stored Procedure: Extended'

		-- 'Applies to: SQL Server 2016 (13.x) and later, Azure SQL Database, Azure Synapse Analytics (SQL Data Warehouse), Parallel Data Warehouse.'
		WHEN 'ET'	THEN 'Table: External'
		END

	RETURN @Return;

END;
GO
PRINT N'Creating Function [smash].[ObjectGroup]...';


GO
CREATE FUNCTION [smash].[ObjectGroup]
(
	@Type	VARCHAR(2)
)
RETURNS VARCHAR(40)
WITH SCHEMABINDING
AS
BEGIN

	DECLARE @Return	VARCHAR(40)

	SET @Return = CASE @Type
		WHEN 'AF'	THEN 'Function'
		WHEN 'C'	THEN 'Constraint'
		WHEN 'D'	THEN 'Constraint'
		WHEN 'F'	THEN 'Key: Foreign'

		WHEN 'FN'	THEN 'Function'
		WHEN 'FS'	THEN 'Function'
		WHEN 'FT'	THEN 'Function'
		WHEN 'IF'	THEN 'Function'

		WHEN 'IT'	THEN 'Table'
		WHEN 'P'	THEN 'Stored Procedure'
		WHEN 'PC'	THEN 'Stored Procedure'

		WHEN 'PG'	THEN 'Plan guide'
		WHEN 'PK'	THEN 'Key: Primary'
		WHEN 'R'	THEN 'Rule (old-style, stand-alone)'
		WHEN 'RF'	THEN 'Replication-filter-procedure'
		WHEN 'S'	THEN 'Table'
		WHEN 'SN'	THEN 'Synonym'
		WHEN 'SO'	THEN 'Sequence Object'
		WHEN 'U'	THEN 'Table'
		WHEN 'V'	THEN 'View'
		WHEN 'EC'	THEN 'Constraint'

		-- 'Applies to: SQL Server 2012 (11.x) and later.'
		WHEN 'SQ'	THEN 'Service Queue'
		WHEN 'TA'	THEN 'Trigger'
		WHEN 'TF'	THEN 'Function'
		WHEN 'TR'	THEN 'Trigger'
		WHEN 'TT'	THEN 'Table Type'
		WHEN 'UQ'	THEN 'Constraint'
		WHEN 'X'	THEN 'Stored Procedure'

		-- 'Applies to: SQL Server 2016 (13.x) and later, Azure SQL Database, Azure Synapse Analytics (SQL Data Warehouse), Parallel Data Warehouse.'
		WHEN 'ET'	THEN 'Table'
		END

	RETURN @Return;

END;
GO
PRINT N'Creating Function [smash].[DoesIndexExist]...';


GO
CREATE FUNCTION [smash].[DoesIndexExist]
(
	@Schema		NVARCHAR(128),
	@Table		NVARCHAR(128),
	@Index		NVARCHAR(128)
)
RETURNS INT
WITH RETURNS NULL ON NULL INPUT
AS
BEGIN

	DECLARE	@Exists		INT;

	SELECT TOP (1)
		@Exists = 1
	FROM
		sys.schemas						[s]	WITH (NOLOCK)
	INNER JOIN
		sys.tables						[t]	WITH (NOLOCK)
			ON	([s].[schema_id]	=	[t].[schema_id])
	INNER JOIN
		sys.indexes						[i]	WITH (NOLOCK)
			ON	([t].[object_id]	=	[i].[object_id])
	WHERE
			([s].[name]	= @Schema)
		AND	([t].[name]	= @Table)
		AND	([i].[name]	= @Index);

	RETURN COALESCE(@Exists, 0);

END;
GO
PRINT N'Creating View [smash].[DatabaseIndexesPhysical]...';


GO
CREATE VIEW [smash].[DatabaseIndexesPhysical]
WITH VIEW_METADATA
AS
SELECT
		[instance_id]				= CHECKSUM(@@SERVERNAME),
		[database_id]				= DB_ID(),
	[s].[schema_id],
	[o].[object_id],
	[i].[index_id],

	[p].[partition_id],
	[p].[partition_number],
	[p].[hobt_id],

	---------------------------------------------------------------------------------
	---------------------------------------------------------------------------------

		[Instance]					= @@SERVERNAME,
		[InstanceHost]				= CAST(SERVERPROPERTY('MachineName') AS VARCHAR),
		[InstanceName]				= @@SERVICENAME,

		[DatabaseType]				= [smash].[SystemDatabaseType](DB_ID()),
		[ObjectGroup]				= [smash].[ObjectGroup]([o].[type]),
		[ObjectType]				= [smash].[ObjectType]([o].[type]),

		[DatabaseName]				= DB_NAME(),
		[SchemaName]				= [s].[name],
		[ObjectName]				= [o].[name],
		[IndexName]					= COALESCE([i].[name], N'Heap'),

		[IndexType]					= CASE [i].[type]
										WHEN 0	THEN 'Heap'
										WHEN 1	THEN 'Rowstore'
										WHEN 2	THEN 'Rowstore'
										WHEN 3	THEN 'XML'
										WHEN 4	THEN 'Spatial'
										WHEN 5	THEN 'Columnstore'
										WHEN 6	THEN 'Columnstore'
										WHEN 7	THEN 'Hash'
										END,

		[IndexTypeClustering]		= CASE [i].[type]
										WHEN 0	THEN 'Heap'
										WHEN 1	THEN 'Clustered'
										WHEN 2	THEN 'Nonclustered'
										WHEN 3	THEN 'XML'
										WHEN 4	THEN 'Spatial'
										WHEN 5	THEN 'Clustered'
										WHEN 6	THEN 'Nonclustered'
										WHEN 7	THEN 'Nonclustered'
										END,

		[IsPrimaryKey]				= CASE [i].[is_primary_key]
										WHEN 0	THEN 'No'
										WHEN 1	THEN 'Yes'
										END,

		[IsUnique]					= CASE [i].[is_unique]
										WHEN 0	THEN 'No'
										WHEN 1	THEN 'Yes'
										END,

		[IsUniqueConstraint]		= CASE [i].[is_unique_constraint]
										WHEN 0	THEN 'No'
										WHEN 1	THEN 'Yes'
										END,

		[IsSingleColumn]			= CASE WHEN ((SELECT COUNT(*) FROM sys.index_columns [x] WHERE ([x].[object_id] = [i].[object_id]) AND ([x].[index_id] = [i].[index_id])) = 1)
										THEN 'Yes'
										ELSE 'No'
										END,

		[ColumnsKey]				= STUFF((
										SELECT
											N', ' + [z].[name] + IIF(([y].[is_descending_key] = 0), N' ASC', N' DESC')
										FROM
											sys.index_columns					[y]
										INNER JOIN
											sys.columns							[z]
												ON	([y].[object_id]		=	[z].[object_id])
												AND	([y].[column_id]		=	[z].[column_id])
										WHERE
												([y].[is_included_column]	=	0)
											AND	([y].[object_id]			=	[i].[object_id])
											AND	([y].[index_id]				=	[i].[index_id])
										ORDER BY
											[y].[key_ordinal]	ASC
										FOR XML PATH(N'')), 1, 2, N''),

		[ColumnsKeyAll]				= STUFF((
										SELECT
											N', ' + [z].[name]
										FROM
											sys.index_columns					[y]
										INNER JOIN
											sys.columns							[z]
												ON	([y].[object_id]		=	[z].[object_id])
												AND	([y].[column_id]		=	[z].[column_id])
										WHERE
												([y].[is_included_column]	=	0)
											AND	([y].[object_id]			=	[i].[object_id])
											AND	([y].[index_id]				=	[i].[index_id])
										ORDER BY
											[z].[name]	ASC
										FOR XML PATH(N'')), 1, 2, N''),

		[ColumnsIncluded]			= STUFF((
										SELECT
											N', ' + [z].[name]
										FROM
											sys.index_columns					[y]
										INNER JOIN
											sys.columns							[z]
												ON	([y].[object_id]		=	[z].[object_id])
												AND	([y].[column_id]		=	[z].[column_id])
										WHERE
												([y].[is_included_column]	=	1)
											AND	([y].[object_id]			=	[i].[object_id])
											AND	([y].[index_id]				=	[i].[index_id])
										ORDER BY
											[y].[key_ordinal]	ASC
										FOR XML PATH(N'')), 1, 2, N''),

		[ColumnsAll]				= STUFF((
										SELECT
											N', ' + [z].[name]
										FROM
											sys.index_columns					[y]
										INNER JOIN
											sys.columns							[z]
												ON	([y].[object_id]		=	[z].[object_id])
												AND	([y].[column_id]		=	[z].[column_id])
										WHERE
												([y].[object_id]			=	[i].[object_id])
											AND	([y].[index_id]				=	[i].[index_id])
										ORDER BY
											[z].[name]	ASC
										FOR XML PATH(N'')), 1, 2, N''),

		[FileGroup]					= [d].[name],

		[FileGroupDescription]		= CASE [d].[type]
										WHEN 'FG'	THEN 'Filegroup'
										WHEN 'FD'	THEN 'Filestream'
										WHEN 'FX'	THEN 'Memory-optimized'
										WHEN 'PS'	THEN 'Partition scheme'
										END,

		[FileGroupIsDefault]		= CASE [d].[is_default]
										WHEN 0	THEN 'No'
										WHEN 1	THEN 'Yes'
										END,

		[FileGroupIsSystem]			= CASE [d].[is_system]
										WHEN 0	THEN 'No'
										WHEN 1	THEN 'Yes'
										END,

		[IgnoreDuplicateKey]		= CASE [i].[ignore_dup_key]
										WHEN 0	THEN 'No'
										WHEN 1	THEN 'Yes'
										END,

		[FillFactor]				= [i].[fill_factor],

		[IsPadded]					= CASE [i].[is_padded]
										WHEN 0	THEN 'No'
										WHEN 1	THEN 'Yes'
										END,

		[IsEnabled]					= CASE [i].[is_disabled]
										WHEN 0	THEN 'Yes'		--	Enabled
										WHEN 1	THEN 'No'		--	Disabled
										END,

		[IsDisabled]				= CASE [i].[is_disabled]
										WHEN 0	THEN 'No'		--	Enabled
										WHEN 1	THEN 'Yes'		--	Disabled
										END,

		[IsHypothetical]			= CASE [i].[is_hypothetical]
										WHEN 0	THEN 'No'
										WHEN 1	THEN 'Yes'
										END,

		[IsIgnoredInOptimization]	= CASE [i].[is_ignored_in_optimization]
										WHEN 0	THEN 'No'
										WHEN 1	THEN 'Yes'
										END,

		[AllowRowLocks]				= CASE [i].[allow_row_locks]
										WHEN 0	THEN 'No'
										WHEN 1	THEN 'Yes'
										END,

		[AllowPageLocks]			= CASE [i].[allow_page_locks]
										WHEN 0	THEN 'No'
										WHEN 1	THEN 'Yes'
										END,

		[IsFiltered]				= CASE [i].[has_filter]
										WHEN 0	THEN 'No'
										WHEN 1	THEN 'Yes'
										END,

		[FilterDefinition]			= [i].[filter_definition],

		[CompressionDelayMinutes]	= [i].[compression_delay],

		[SuppressDupKeyMessages]	= CASE [i].[suppress_dup_key_messages]
										WHEN 0	THEN 'No'		--	Show
										WHEN 1	THEN 'Yes'		--	Hide (Suppress)
										END,

		[IsAutoCreated]				= CASE [i].[auto_created]
										WHEN 0	THEN 'No'		--	User
										WHEN 1	THEN 'Yes'		--	Auto
										END,

		[OptimizeForSequentialKey]	= CONVERT(VARCHAR(3), NULL),
		--[OptimizeForSequentialKey]	= CASE [i].[optimize_for_sequential_key]
		--								WHEN 0	THEN 'No'		--	Disabled
		--								WHEN 1	THEN 'Yes'		--	Enabled
		--								END,
		
	---------------------------------------------------------------------------------
	---------------------------------------------------------------------------------

		[IndexTypePhysical]				= CASE [x].[index_type_desc]
											WHEN 'HEAP'								THEN 'Heap'
											WHEN 'CLUSTERED INDEX'					THEN 'Rowstore (Clustered)'
											WHEN 'NONCLUSTERED INDEX'				THEN 'Rowstore (Nonclustered)'
											WHEN 'XML INDEX'						THEN 'XML'
											WHEN 'PRIMARY XML INDEX'				THEN 'XML (Primary)'
											WHEN 'EXTENDED INDEX'					THEN 'Extended'
											WHEN 'COLUMNSTORE MAPPING INDEX'		THEN 'Columnstore (Mapping)'
											WHEN 'COLUMNSTORE DELETEBUFFER INDEX'	THEN 'Columnstore (Delete Buffer)'
											WHEN 'COLUMNSTORE DELETEBITMAP INDEX'	THEN 'Columnstore (Delete Bitmap)'
											ELSE [x].[index_type_desc]
											END,

		[AllocationType]				= CASE [x].[alloc_unit_type_desc]
											WHEN 'DROPPED'				THEN 'Dropped'
											WHEN 'IN_ROW_DATA'			THEN 'In-row data'
											WHEN 'LOB_DATA'				THEN 'Large object (LOB)'
											WHEN 'ROW_OVERFLOW_DATA'	THEN 'Row-overflow'
											ELSE [x].[alloc_unit_type_desc]
											END,

		[IndexDepth]					= [x].[index_depth],
		[IndexLevel]					= [x].[index_level],

		[FragmentationPcnt]				= [x].[avg_fragmentation_in_percent] / 100.0,

		[FragmentCount]					= [x].[fragment_count],
		[FragmentSizePages]				= [x].[avg_fragment_size_in_pages],
		[FragmentSizeMb]				= (8.0 / 1024.0 * [x].[avg_fragment_size_in_pages]),

		[DataPages]						= [x].[page_count],
		[DataMb]						= (8.0 * CONVERT(FLOAT, [x].[page_count])) / 1024.0,

		[DataCompressedPages]			= [x].[compressed_page_count],
		[DataCompressedMb]				= (8.0 * CONVERT(FLOAT, [x].[compressed_page_count])) / 1024.0,

		[FragmentPageSpaceUsedPcnt]		= [x].[avg_page_space_used_in_percent] / 100.0,

		[RecordCount]					= [x].[record_count],
		[RecordCountGhost]				= [x].[ghost_record_count],
		[RecordCountGhostVersion]		= [x].[version_ghost_record_count],
		[RecordCountForwarded]			= [x].[forwarded_record_count],

		[RecordSizeMinByte]				= [x].[min_record_size_in_bytes],
		[RecordSizeMaxByte]				= [x].[max_record_size_in_bytes],
		[RecordSizeAvgByte]				= [x].[avg_record_size_in_bytes],

		[ColumnstoreDeleteBufferState]	= CASE [x].[columnstore_delete_buffer_state]
											WHEN 0	THEN 'Not Applicable'
											WHEN 1	THEN 'Open'
											WHEN 2	THEN 'Draining'
											WHEN 3	THEN 'Flushing'
											WHEN 4	THEN 'Retiring'
											WHEN 5	THEN 'Ready'
											ELSE [x].[columnstore_delete_buffer_state_desc]
											END,

		[RecordCountVersion]			= [x].[version_record_count],
		[RecordCountVersionInRow]		= [x].[inrow_version_record_count],
		[RecordCountVersionDiff]		= [x].[inrow_diff_version_record_count],
		[RecordCountVersionInRowByte]	= [x].[total_inrow_version_payload_size_in_bytes],
		[RecordCountVersionOffRow]		= [x].[offrow_regular_version_record_count],
		[RecordCountVersionOffRowLong]	= [x].[offrow_long_term_version_record_count]

FROM
	sys.schemas							[s]
INNER JOIN
	sys.objects							[o]
		ON	([s].[schema_id]		=	[o].[schema_id])
		AND	([o].[is_ms_shipped]	=	0)
INNER JOIN
	sys.indexes							[i]
		ON	([o].[object_id]		=	[i].[object_id])
INNER JOIN
	sys.data_spaces 					[d]
		ON	([i].[data_space_id]	=	[d].[data_space_id])
INNER JOIN
	sys.partitions						[p]
		ON	([i].[object_id]		=	[p].[object_id])
		AND	([i].[index_id]			=	[p].[index_id])
CROSS APPLY
	sys.dm_db_index_physical_stats(DB_ID(), [o].[object_id], [i].[index_id], [p].[partition_number], 'DETAILED')	[x];
GO
PRINT N'Creating View [smash].[DatabaseIndexesAllocation]...';


GO
CREATE VIEW [smash].[DatabaseIndexesAllocation]
WITH VIEW_METADATA
AS
SELECT
		[instance_id]				= CHECKSUM(@@SERVERNAME),
		[database_id]				= DB_ID(),
	[s].[schema_id],
	[o].[object_id],
	[i].[index_id],

	[p].[partition_id],
	[p].[partition_number],
	[p].[hobt_id],
	[a].[allocation_unit_id],
	[a].[container_id],

	---------------------------------------------------------------------------------
	---------------------------------------------------------------------------------

		[Instance]					= @@SERVERNAME,
		[InstanceHost]				= CAST(SERVERPROPERTY('MachineName') AS VARCHAR),
		[InstanceName]				= @@SERVICENAME,

		[DatabaseType]				= [smash].[SystemDatabaseType](DB_ID()),
		[ObjectGroup]				= [smash].[ObjectGroup]([o].[type]),
		[ObjectType]				= [smash].[ObjectType]([o].[type]),

		[DatabaseName]				= DB_NAME(),
		[SchemaName]				= [s].[name],
		[ObjectName]				= [o].[name],
		[IndexName]					= COALESCE([i].[name], N'Heap'),

		[IndexType]					= CASE [i].[type]
										WHEN 0	THEN 'Heap'
										WHEN 1	THEN 'Rowstore'
										WHEN 2	THEN 'Rowstore'
										WHEN 3	THEN 'XML'
										WHEN 4	THEN 'Spatial'
										WHEN 5	THEN 'Columnstore'
										WHEN 6	THEN 'Columnstore'
										WHEN 7	THEN 'Hash'
										END,

		[IndexTypeClustering]		= CASE [i].[type]
										WHEN 0	THEN 'Heap'
										WHEN 1	THEN 'Clustered'
										WHEN 2	THEN 'Nonclustered'
										WHEN 3	THEN 'XML'
										WHEN 4	THEN 'Spatial'
										WHEN 5	THEN 'Clustered'
										WHEN 6	THEN 'Nonclustered'
										WHEN 7	THEN 'Nonclustered'
										END,

		[IsPrimaryKey]				= CASE [i].[is_primary_key]
										WHEN 0	THEN 'No'
										WHEN 1	THEN 'Yes'
										END,

		[IsUnique]					= CASE [i].[is_unique]
										WHEN 0	THEN 'No'
										WHEN 1	THEN 'Yes'
										END,

		[IsUniqueConstraint]		= CASE [i].[is_unique_constraint]
										WHEN 0	THEN 'No'
										WHEN 1	THEN 'Yes'
										END,

		[IsSingleColumn]			= CASE WHEN ((SELECT COUNT(*) FROM sys.index_columns [x] WHERE ([x].[object_id] = [i].[object_id]) AND ([x].[index_id] = [i].[index_id])) = 1)
										THEN 'Yes'
										ELSE 'No'
										END,

		[ColumnsKey]				= STUFF((
										SELECT
											N', ' + [z].[name] + IIF(([y].[is_descending_key] = 0), N' ASC', N' DESC')
										FROM
											sys.index_columns					[y]
										INNER JOIN
											sys.columns							[z]
												ON	([y].[object_id]		=	[z].[object_id])
												AND	([y].[column_id]		=	[z].[column_id])
										WHERE
												([y].[is_included_column]	=	0)
											AND	([y].[object_id]			=	[i].[object_id])
											AND	([y].[index_id]				=	[i].[index_id])
										ORDER BY
											[y].[key_ordinal]	ASC
										FOR XML PATH(N'')), 1, 2, N''),

		[ColumnsKeyAll]				= STUFF((
										SELECT
											N', ' + [z].[name]
										FROM
											sys.index_columns					[y]
										INNER JOIN
											sys.columns							[z]
												ON	([y].[object_id]		=	[z].[object_id])
												AND	([y].[column_id]		=	[z].[column_id])
										WHERE
												([y].[is_included_column]	=	0)
											AND	([y].[object_id]			=	[i].[object_id])
											AND	([y].[index_id]				=	[i].[index_id])
										ORDER BY
											[z].[name]	ASC
										FOR XML PATH(N'')), 1, 2, N''),

		[ColumnsIncluded]			= STUFF((
										SELECT
											N', ' + [z].[name]
										FROM
											sys.index_columns					[y]
										INNER JOIN
											sys.columns							[z]
												ON	([y].[object_id]		=	[z].[object_id])
												AND	([y].[column_id]		=	[z].[column_id])
										WHERE
												([y].[is_included_column]	=	1)
											AND	([y].[object_id]			=	[i].[object_id])
											AND	([y].[index_id]				=	[i].[index_id])
										ORDER BY
											[y].[key_ordinal]	ASC
										FOR XML PATH(N'')), 1, 2, N''),

		[ColumnsAll]				= STUFF((
										SELECT
											N', ' + [z].[name]
										FROM
											sys.index_columns					[y]
										INNER JOIN
											sys.columns							[z]
												ON	([y].[object_id]		=	[z].[object_id])
												AND	([y].[column_id]		=	[z].[column_id])
										WHERE
												([y].[object_id]			=	[i].[object_id])
											AND	([y].[index_id]				=	[i].[index_id])
										ORDER BY
											[z].[name]	ASC
										FOR XML PATH(N'')), 1, 2, N''),

		[FileGroup]					= [d].[name],

		[FileGroupDescription]		= CASE [d].[type]
										WHEN 'FG'	THEN 'Filegroup'
										WHEN 'FD'	THEN 'Filestream'
										WHEN 'FX'	THEN 'Memory-optimized'
										WHEN 'PS'	THEN 'Partition scheme'
										END,

		[FileGroupIsDefault]		= CASE [d].[is_default]
										WHEN 0	THEN 'No'
										WHEN 1	THEN 'Yes'
										END,

		[FileGroupIsSystem]			= CASE [d].[is_system]
										WHEN 0	THEN 'No'
										WHEN 1	THEN 'Yes'
										END,

		[IgnoreDuplicateKey]		= CASE [i].[ignore_dup_key]
										WHEN 0	THEN 'No'
										WHEN 1	THEN 'Yes'
										END,

		[FillFactor]				= [i].[fill_factor],

		[IsPadded]					= CASE [i].[is_padded]
										WHEN 0	THEN 'No'
										WHEN 1	THEN 'Yes'
										END,

		[IsEnabled]					= CASE [i].[is_disabled]
										WHEN 0	THEN 'Yes'		--	Enabled
										WHEN 1	THEN 'No'		--	Disabled
										END,

		[IsDisabled]				= CASE [i].[is_disabled]
										WHEN 0	THEN 'No'		--	Enabled
										WHEN 1	THEN 'Yes'		--	Disabled
										END,

		[IsHypothetical]			= CASE [i].[is_hypothetical]
										WHEN 0	THEN 'No'
										WHEN 1	THEN 'Yes'
										END,

		[IsIgnoredInOptimization]	= CASE [i].[is_ignored_in_optimization]
										WHEN 0	THEN 'No'
										WHEN 1	THEN 'Yes'
										END,

		[AllowRowLocks]				= CASE [i].[allow_row_locks]
										WHEN 0	THEN 'No'
										WHEN 1	THEN 'Yes'
										END,

		[AllowPageLocks]			= CASE [i].[allow_page_locks]
										WHEN 0	THEN 'No'
										WHEN 1	THEN 'Yes'
										END,

		[IsFiltered]				= CASE [i].[has_filter]
										WHEN 0	THEN 'No'
										WHEN 1	THEN 'Yes'
										END,

		[FilterDefinition]			= [i].[filter_definition],

		[CompressionDelayMinutes]	= [i].[compression_delay],

		[SuppressDupKeyMessages]	= CASE [i].[suppress_dup_key_messages]
										WHEN 0	THEN 'No'		--	Show
										WHEN 1	THEN 'Yes'		--	Hide (Suppress)
										END,

		[IsAutoCreated]				= CASE [i].[auto_created]
										WHEN 0	THEN 'No'		--	User
										WHEN 1	THEN 'Yes'		--	Auto
										END,

		[OptimizeForSequentialKey]	= CONVERT(VARCHAR(3), NULL),
		--[OptimizeForSequentialKey]	= CASE [i].[optimize_for_sequential_key]
		--								WHEN 0	THEN 'No'		--	Disabled
		--								WHEN 1	THEN 'Yes'		--	Enabled
		--								END,
		
	---------------------------------------------------------------------------------
	---------------------------------------------------------------------------------

		[IsRowCount]				= IIF(([i].[index_id] <= 1) AND ([a].[type] = 1), 'Yes', 'No'),

		[RowCount]					= [p].[rows],

		[DataCompression]			= CASE [p].[data_compression]
										WHEN 0	THEN 'None'
										WHEN 1	THEN 'Row'
										WHEN 2	THEN 'Page'
										WHEN 3	THEN 'Columnstore'
										WHEN 4	THEN 'Columnstore (Archive)'
										ELSE [p].[data_compression_desc]
										END,

		[AllocationType]			= CASE [a].[type]
										WHEN 0	THEN 'Dropped'
										WHEN 1	THEN 'In-row data'
										WHEN 2	THEN 'Large object (LOB)'
										WHEN 3	THEN 'Row-overflow'
										ELSE [a].[type_desc]
										END,

		[AllocationTotalPages]		= [a].[total_pages],
		[AllocationUsedPages]		= [a].[used_pages],
		[AllocationDataPages]		= [a].[data_pages],
		[AllocationFreePages]		= ([a].[total_pages] - [a].[used_pages]),

		[AllocationTotalMb]			= (8.0 * CONVERT(FLOAT, [a].[total_pages]))	/ 1024.0,
		[AllocationUsedMb]			= (8.0 * CONVERT(FLOAT, [a].[used_pages]))	/ 1024.0,
		[AllocationDataMb]			= (8.0 * CONVERT(FLOAT, [a].[data_pages]))	/ 1024.0,
		[AllocationFreeMb]			= (8.0 * CONVERT(FLOAT, [a].[total_pages] - [a].[used_pages]))	/ 1024.0

FROM
	sys.schemas							[s]
INNER JOIN
	sys.objects							[o]
		ON	([s].[schema_id]		=	[o].[schema_id])
		AND	([o].[is_ms_shipped]	=	0)
INNER JOIN
	sys.indexes							[i]
		ON	([o].[object_id]		=	[i].[object_id])
INNER JOIN
	sys.data_spaces 					[d]
		ON	([i].[data_space_id]	=	[d].[data_space_id])
INNER JOIN
	sys.partitions						[p]
		ON	([i].[object_id]		=	[p].[object_id])
		AND	([i].[index_id]			=	[p].[index_id])
INNER JOIN
	sys.allocation_units				[a]
		ON	([i].[data_space_id]	=	[a].[data_space_id])
		AND	([p].[partition_id]		=	[a].[container_id]);
GO
PRINT N'Creating View [smash].[DatabaseIndexes]...';


GO
CREATE VIEW [smash].[DatabaseIndexes]
WITH VIEW_METADATA
AS
SELECT
		[instance_id]				= CHECKSUM(@@SERVERNAME),
		[database_id]				= DB_ID(),
	[s].[schema_id],
	[o].[object_id],
	[i].[index_id],

	---------------------------------------------------------------------------------
	---------------------------------------------------------------------------------

		[Instance]					= @@SERVERNAME,
		[InstanceHost]				= CAST(SERVERPROPERTY('MachineName') AS VARCHAR),
		[InstanceName]				= @@SERVICENAME,

		[DatabaseType]				= [smash].[SystemDatabaseType](DB_ID()),
		[ObjectGroup]				= [smash].[ObjectGroup]([o].[type]),
		[ObjectType]				= [smash].[ObjectType]([o].[type]),

		[DatabaseName]				= DB_NAME(),
		[SchemaName]				= [s].[name],
		[ObjectName]				= [o].[name],
		[IndexName]					= COALESCE([i].[name], N'Heap'),

		[IndexType]					= CASE [i].[type]
										WHEN 0	THEN 'Heap'
										WHEN 1	THEN 'Rowstore'
										WHEN 2	THEN 'Rowstore'
										WHEN 3	THEN 'XML'
										WHEN 4	THEN 'Spatial'
										WHEN 5	THEN 'Columnstore'
										WHEN 6	THEN 'Columnstore'
										WHEN 7	THEN 'Hash'
										END,

		[IndexTypeClustering]		= CASE [i].[type]
										WHEN 0	THEN 'Heap'
										WHEN 1	THEN 'Clustered'
										WHEN 2	THEN 'Nonclustered'
										WHEN 3	THEN 'XML'
										WHEN 4	THEN 'Spatial'
										WHEN 5	THEN 'Clustered'
										WHEN 6	THEN 'Nonclustered'
										WHEN 7	THEN 'Nonclustered'
										END,

		[IsPrimaryKey]				= CASE [i].[is_primary_key]
										WHEN 0	THEN 'No'
										WHEN 1	THEN 'Yes'
										END,

		[IsUnique]					= CASE [i].[is_unique]
										WHEN 0	THEN 'No'
										WHEN 1	THEN 'Yes'
										END,

		[IsUniqueConstraint]		= CASE [i].[is_unique_constraint]
										WHEN 0	THEN 'No'
										WHEN 1	THEN 'Yes'
										END,

		[IsSingleColumn]			= CASE WHEN ((SELECT COUNT(*) FROM sys.index_columns [x] WHERE ([x].[object_id] = [i].[object_id]) AND ([x].[index_id] = [i].[index_id])) = 1)
										THEN 'Yes'
										ELSE 'No'
										END,

		[ColumnsKey]				= STUFF((
										SELECT
											N', ' + [z].[name] + IIF(([y].[is_descending_key] = 0), N' ASC', N' DESC')
										FROM
											sys.index_columns					[y]
										INNER JOIN
											sys.columns							[z]
												ON	([y].[object_id]		=	[z].[object_id])
												AND	([y].[column_id]		=	[z].[column_id])
										WHERE
												([y].[is_included_column]	=	0)
											AND	([y].[object_id]			=	[i].[object_id])
											AND	([y].[index_id]				=	[i].[index_id])
										ORDER BY
											[y].[key_ordinal]	ASC
										FOR XML PATH(N'')), 1, 2, N''),

		[ColumnsKeyAll]				= STUFF((
										SELECT
											N', ' + [z].[name]
										FROM
											sys.index_columns					[y]
										INNER JOIN
											sys.columns							[z]
												ON	([y].[object_id]		=	[z].[object_id])
												AND	([y].[column_id]		=	[z].[column_id])
										WHERE
												([y].[is_included_column]	=	0)
											AND	([y].[object_id]			=	[i].[object_id])
											AND	([y].[index_id]				=	[i].[index_id])
										ORDER BY
											[z].[name]	ASC
										FOR XML PATH(N'')), 1, 2, N''),

		[ColumnsIncluded]			= STUFF((
										SELECT
											N', ' + [z].[name]
										FROM
											sys.index_columns					[y]
										INNER JOIN
											sys.columns							[z]
												ON	([y].[object_id]		=	[z].[object_id])
												AND	([y].[column_id]		=	[z].[column_id])
										WHERE
												([y].[is_included_column]	=	1)
											AND	([y].[object_id]			=	[i].[object_id])
											AND	([y].[index_id]				=	[i].[index_id])
										ORDER BY
											[y].[key_ordinal]	ASC
										FOR XML PATH(N'')), 1, 2, N''),

		[ColumnsAll]				= STUFF((
										SELECT
											N', ' + [z].[name]
										FROM
											sys.index_columns					[y]
										INNER JOIN
											sys.columns							[z]
												ON	([y].[object_id]		=	[z].[object_id])
												AND	([y].[column_id]		=	[z].[column_id])
										WHERE
												([y].[object_id]			=	[i].[object_id])
											AND	([y].[index_id]				=	[i].[index_id])
										ORDER BY
											[z].[name]	ASC
										FOR XML PATH(N'')), 1, 2, N''),

		[FileGroup]					= [d].[name],

		[FileGroupDescription]		= CASE [d].[type]
										WHEN 'FG'	THEN 'Filegroup'
										WHEN 'FD'	THEN 'Filestream'
										WHEN 'FX'	THEN 'Memory-optimized'
										WHEN 'PS'	THEN 'Partition scheme'
										END,

		[FileGroupIsDefault]		= CASE [d].[is_default]
										WHEN 0	THEN 'No'
										WHEN 1	THEN 'Yes'
										END,

		[FileGroupIsSystem]			= CASE [d].[is_system]
										WHEN 0	THEN 'No'
										WHEN 1	THEN 'Yes'
										END,

		[IgnoreDuplicateKey]		= CASE [i].[ignore_dup_key]
										WHEN 0	THEN 'No'
										WHEN 1	THEN 'Yes'
										END,

		[FillFactor]				= [i].[fill_factor],

		[IsPadded]					= CASE [i].[is_padded]
										WHEN 0	THEN 'No'
										WHEN 1	THEN 'Yes'
										END,

		[IsEnabled]					= CASE [i].[is_disabled]
										WHEN 0	THEN 'Yes'		--	Enabled
										WHEN 1	THEN 'No'		--	Disabled
										END,

		[IsDisabled]				= CASE [i].[is_disabled]
										WHEN 0	THEN 'No'		--	Enabled
										WHEN 1	THEN 'Yes'		--	Disabled
										END,

		[IsHypothetical]			= CASE [i].[is_hypothetical]
										WHEN 0	THEN 'No'
										WHEN 1	THEN 'Yes'
										END,

		[IsIgnoredInOptimization]	= CASE [i].[is_ignored_in_optimization]
										WHEN 0	THEN 'No'
										WHEN 1	THEN 'Yes'
										END,

		[AllowRowLocks]				= CASE [i].[allow_row_locks]
										WHEN 0	THEN 'No'
										WHEN 1	THEN 'Yes'
										END,

		[AllowPageLocks]			= CASE [i].[allow_page_locks]
										WHEN 0	THEN 'No'
										WHEN 1	THEN 'Yes'
										END,

		[IsFiltered]				= CASE [i].[has_filter]
										WHEN 0	THEN 'No'
										WHEN 1	THEN 'Yes'
										END,

		[FilterDefinition]			= [i].[filter_definition],

		[CompressionDelayMinutes]	= [i].[compression_delay],

		[SuppressDupKeyMessages]	= CASE [i].[suppress_dup_key_messages]
										WHEN 0	THEN 'No'		--	Show
										WHEN 1	THEN 'Yes'		--	Hide (Suppress)
										END,

		[IsAutoCreated]				= CASE [i].[auto_created]
										WHEN 0	THEN 'No'		--	User
										WHEN 1	THEN 'Yes'		--	Auto
										END,

		[OptimizeForSequentialKey]	= CONVERT(VARCHAR(3), NULL),
		--[OptimizeForSequentialKey]	= CASE [i].[optimize_for_sequential_key]
		--								WHEN 0	THEN 'No'		--	Disabled
		--								WHEN 1	THEN 'Yes'		--	Enabled
		--								END,
		
	---------------------------------------------------------------------------------
	---------------------------------------------------------------------------------

		[IsIndexDropCandidate]		= CASE WHEN ([u].[index_id] IS NOT NULL)
										THEN
											CASE WHEN
													([i].[is_primary_key]	= 0)
												AND	([i].[is_unique ]		= 0)
												AND	([u].[user_updates]		> 0)
												AND	([u].[user_seeks]		= 0)
												AND	([u].[user_scans]		= 0)
												AND	([u].[user_lookups]		= 0)
											THEN 'Yes'
											ELSE 'No'
											END
										ELSE NULL
										END,

		[IsIndexReadByUser]			= CASE WHEN ([u].[index_id] IS NOT NULL)
										THEN
											CASE WHEN
													([u].[user_seeks]		= 0)
												AND	([u].[user_scans]		= 0)
												AND	([u].[user_lookups]		= 0)
											THEN 'No'
											ELSE 'Yes'
											END
										ELSE NULL
										END,

		[IsIndexReadBySystem]		= CASE WHEN ([u].[index_id] IS NOT NULL)
										THEN
											CASE WHEN
													([u].[system_seeks]		= 0)
												AND	([u].[system_scans]		= 0)
												AND	([u].[system_lookups]	= 0)
											THEN 'No'
											ELSE 'Yes'
											END
										ELSE NULL
										END,

		[UserSeeks]					= [u].[user_seeks],
		[UserScans]					= [u].[user_scans],
		[UserLookups]				= [u].[user_lookups],
		[UserUpdates]				= [u].[user_updates],

		[LastUserSeek]				= [u].[last_user_seek],
		[LastUserScan]				= [u].[last_user_scan],
		[LastUserLookup]			= [u].[last_user_lookup],
		[LastUserUpdate]			= [u].[last_user_update],

		[LastUserRead]				= (SELECT MAX([x].[v]) FROM (VALUES ([u].[last_user_seek]), ([u].[last_user_scan]), ([u].[last_user_lookup])) [x]([v])),

		[SystemSeeks]				= [u].[system_seeks],
		[SystemScans]				= [u].[system_scans],
		[SystemLookups]				= [u].[system_lookups],
		[SystemUpdates]				= [u].[system_updates],

		[LastSystemSeek]			= [u].[last_system_seek],
		[LastSystemScan]			= [u].[last_system_scan],
		[LastSystemLookup]			= [u].[last_system_lookup],
		[LastSystemUpdate]			= [u].[last_system_update],

		[LastSystemRead]			= (SELECT MAX([x].[v]) FROM (VALUES ([u].[last_system_seek]), ([u].[last_system_scan]), ([u].[last_system_lookup])) [x]([v]))

FROM
	sys.schemas							[s]
INNER JOIN
	sys.objects							[o]
		ON	([s].[schema_id]		=	[o].[schema_id])
		AND	([o].[is_ms_shipped]	=	0)
INNER JOIN
	sys.indexes							[i]
		ON	([o].[object_id]		=	[i].[object_id])
INNER JOIN
	sys.data_spaces 					[d]
		ON	([i].[data_space_id]	=	[d].[data_space_id])
LEFT OUTER JOIN
	sys.dm_db_index_usage_stats			[u]
		ON	([i].[object_id]		=	[u].[object_id])
		AND	([i].[index_id]			=	[u].[index_id])
		AND	([u].[database_id]		=	DB_ID());
GO
PRINT N'Creating View [smash].[DatabaseIndexesDuplicate]...';


GO
CREATE VIEW [smash].[DatabaseIndexesDuplicate]
WITH VIEW_METADATA
AS
SELECT
	[i].[instance_id],
	[i].[database_id],
	[i].[schema_id],
	[i].[object_id],
	[i].[index_id],

	[i].[Instance],
	[i].[InstanceHost],
	[i].[InstanceName],

	[i].[DatabaseType],
	[i].[ObjectGroup],
	[i].[ObjectType],

	[i].[DatabaseName],
	[i].[SchemaName],
	[i].[ObjectName],
	[i].[IndexName],

	[i].[IndexType],
	[i].[IndexTypeClustering],

	[i].[ColumnsKey],
	[i].[ColumnsKeyAll],
	[i].[ColumnsIncluded],
	[i].[ColumnsAll]
FROM
	[smash].[DatabaseIndexes]		[i]
WHERE EXISTS (
	SELECT TOP 1 1
	FROM
		[smash].[DatabaseIndexes]	[t]
	WHERE
			([t].[schema_id]		=	[i].[schema_id])
		AND	([t].[object_id]		=	[i].[object_id])
		AND	([t].[index_id]			<>	[i].[index_id])

		AND	(
				(	([t].[ColumnsKey]							=	[i].[ColumnsKey])
					AND	(COALESCE([t].[ColumnsIncluded], N'')	=	COALESCE([i].[ColumnsIncluded], N''))
				)
			OR	(	([t].[ColumnsKey] LIKE LEFT([i].[ColumnsKey], LEN([t].[ColumnsKey])))
				OR	([i].[ColumnsKey] LIKE LEFT([t].[ColumnsKey], LEN([i].[ColumnsKey])))
				)
			OR	(	([t].[ColumnsKeyAll] LIKE LEFT([i].[ColumnsKeyAll], LEN([t].[ColumnsKeyAll])))
				OR	([i].[ColumnsKeyAll] LIKE LEFT([t].[ColumnsKeyAll], LEN([i].[ColumnsKeyAll])))
				)
			OR	(	([t].[ColumnsAll] LIKE LEFT([i].[ColumnsAll], LEN([t].[ColumnsAll])))
				OR	([i].[ColumnsAll] LIKE LEFT([t].[ColumnsAll], LEN([i].[ColumnsAll])))
				)
			)
	);
GO
PRINT N'Update complete.';


GO
